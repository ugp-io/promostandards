// Code generated by gowsdl DO NOT EDIT.

package myservice

import (
	"context"
	"encoding/xml"
	"github.com/hooklift/gowsdl/soap"
	"time"
)

// against "unused imports"
var _ time.Time
var _ xml.Name

type AnyType struct {
	InnerXML string `xml:",innerxml"`
}

type AnyURI string

type NCName string

//
// Two-letter (alpha-2) ISO 3166-1 code for one of the 243 countries.
//

type ISO3166CountyCode string

const (
	ISO3166CountyCodeAF ISO3166CountyCode = "AF"

	ISO3166CountyCodeAX ISO3166CountyCode = "AX"

	ISO3166CountyCodeAL ISO3166CountyCode = "AL"

	ISO3166CountyCodeDZ ISO3166CountyCode = "DZ"

	ISO3166CountyCodeAS ISO3166CountyCode = "AS"

	ISO3166CountyCodeAD ISO3166CountyCode = "AD"

	ISO3166CountyCodeAO ISO3166CountyCode = "AO"

	ISO3166CountyCodeAI ISO3166CountyCode = "AI"

	ISO3166CountyCodeAQ ISO3166CountyCode = "AQ"

	ISO3166CountyCodeAG ISO3166CountyCode = "AG"

	ISO3166CountyCodeAR ISO3166CountyCode = "AR"

	ISO3166CountyCodeAM ISO3166CountyCode = "AM"

	ISO3166CountyCodeAW ISO3166CountyCode = "AW"

	ISO3166CountyCodeAU ISO3166CountyCode = "AU"

	ISO3166CountyCodeAT ISO3166CountyCode = "AT"

	ISO3166CountyCodeAZ ISO3166CountyCode = "AZ"

	ISO3166CountyCodeBS ISO3166CountyCode = "BS"

	ISO3166CountyCodeBH ISO3166CountyCode = "BH"

	ISO3166CountyCodeBD ISO3166CountyCode = "BD"

	ISO3166CountyCodeBB ISO3166CountyCode = "BB"

	ISO3166CountyCodeBY ISO3166CountyCode = "BY"

	ISO3166CountyCodeBE ISO3166CountyCode = "BE"

	ISO3166CountyCodeBZ ISO3166CountyCode = "BZ"

	ISO3166CountyCodeBJ ISO3166CountyCode = "BJ"

	ISO3166CountyCodeBM ISO3166CountyCode = "BM"

	ISO3166CountyCodeBT ISO3166CountyCode = "BT"

	ISO3166CountyCodeBO ISO3166CountyCode = "BO"

	ISO3166CountyCodeBA ISO3166CountyCode = "BA"

	ISO3166CountyCodeBW ISO3166CountyCode = "BW"

	ISO3166CountyCodeBV ISO3166CountyCode = "BV"

	ISO3166CountyCodeBR ISO3166CountyCode = "BR"

	ISO3166CountyCodeIO ISO3166CountyCode = "IO"

	ISO3166CountyCodeBN ISO3166CountyCode = "BN"

	ISO3166CountyCodeBG ISO3166CountyCode = "BG"

	ISO3166CountyCodeBF ISO3166CountyCode = "BF"

	ISO3166CountyCodeBI ISO3166CountyCode = "BI"

	ISO3166CountyCodeKH ISO3166CountyCode = "KH"

	ISO3166CountyCodeCM ISO3166CountyCode = "CM"

	ISO3166CountyCodeCA ISO3166CountyCode = "CA"

	ISO3166CountyCodeCV ISO3166CountyCode = "CV"

	ISO3166CountyCodeKY ISO3166CountyCode = "KY"

	ISO3166CountyCodeCF ISO3166CountyCode = "CF"

	ISO3166CountyCodeTD ISO3166CountyCode = "TD"

	ISO3166CountyCodeCL ISO3166CountyCode = "CL"

	ISO3166CountyCodeCN ISO3166CountyCode = "CN"

	ISO3166CountyCodeCX ISO3166CountyCode = "CX"

	ISO3166CountyCodeCC ISO3166CountyCode = "CC"

	ISO3166CountyCodeCO ISO3166CountyCode = "CO"

	ISO3166CountyCodeKM ISO3166CountyCode = "KM"

	ISO3166CountyCodeCG ISO3166CountyCode = "CG"

	ISO3166CountyCodeCD ISO3166CountyCode = "CD"

	ISO3166CountyCodeCK ISO3166CountyCode = "CK"

	ISO3166CountyCodeCR ISO3166CountyCode = "CR"

	ISO3166CountyCodeCI ISO3166CountyCode = "CI"

	ISO3166CountyCodeHR ISO3166CountyCode = "HR"

	ISO3166CountyCodeCU ISO3166CountyCode = "CU"

	ISO3166CountyCodeCY ISO3166CountyCode = "CY"

	ISO3166CountyCodeCZ ISO3166CountyCode = "CZ"

	ISO3166CountyCodeDK ISO3166CountyCode = "DK"

	ISO3166CountyCodeDJ ISO3166CountyCode = "DJ"

	ISO3166CountyCodeDM ISO3166CountyCode = "DM"

	ISO3166CountyCodeDO ISO3166CountyCode = "DO"

	ISO3166CountyCodeEC ISO3166CountyCode = "EC"

	ISO3166CountyCodeEG ISO3166CountyCode = "EG"

	ISO3166CountyCodeSV ISO3166CountyCode = "SV"

	ISO3166CountyCodeGQ ISO3166CountyCode = "GQ"

	ISO3166CountyCodeER ISO3166CountyCode = "ER"

	ISO3166CountyCodeEE ISO3166CountyCode = "EE"

	ISO3166CountyCodeET ISO3166CountyCode = "ET"

	ISO3166CountyCodeFK ISO3166CountyCode = "FK"

	ISO3166CountyCodeFO ISO3166CountyCode = "FO"

	ISO3166CountyCodeFJ ISO3166CountyCode = "FJ"

	ISO3166CountyCodeFI ISO3166CountyCode = "FI"

	ISO3166CountyCodeFR ISO3166CountyCode = "FR"

	ISO3166CountyCodeGF ISO3166CountyCode = "GF"

	ISO3166CountyCodePF ISO3166CountyCode = "PF"

	ISO3166CountyCodeTF ISO3166CountyCode = "TF"

	ISO3166CountyCodeGA ISO3166CountyCode = "GA"

	ISO3166CountyCodeGM ISO3166CountyCode = "GM"

	ISO3166CountyCodeGE ISO3166CountyCode = "GE"

	ISO3166CountyCodeDE ISO3166CountyCode = "DE"

	ISO3166CountyCodeGH ISO3166CountyCode = "GH"

	ISO3166CountyCodeGI ISO3166CountyCode = "GI"

	ISO3166CountyCodeGR ISO3166CountyCode = "GR"

	ISO3166CountyCodeGL ISO3166CountyCode = "GL"

	ISO3166CountyCodeGD ISO3166CountyCode = "GD"

	ISO3166CountyCodeGP ISO3166CountyCode = "GP"

	ISO3166CountyCodeGU ISO3166CountyCode = "GU"

	ISO3166CountyCodeGT ISO3166CountyCode = "GT"

	ISO3166CountyCodeGG ISO3166CountyCode = "GG"

	ISO3166CountyCodeGN ISO3166CountyCode = "GN"

	ISO3166CountyCodeGW ISO3166CountyCode = "GW"

	ISO3166CountyCodeGY ISO3166CountyCode = "GY"

	ISO3166CountyCodeHT ISO3166CountyCode = "HT"

	ISO3166CountyCodeHM ISO3166CountyCode = "HM"

	ISO3166CountyCodeVA ISO3166CountyCode = "VA"

	ISO3166CountyCodeHN ISO3166CountyCode = "HN"

	ISO3166CountyCodeHK ISO3166CountyCode = "HK"

	ISO3166CountyCodeHU ISO3166CountyCode = "HU"

	ISO3166CountyCodeIS ISO3166CountyCode = "IS"

	ISO3166CountyCodeIN ISO3166CountyCode = "IN"

	ISO3166CountyCodeID ISO3166CountyCode = "ID"

	ISO3166CountyCodeIR ISO3166CountyCode = "IR"

	ISO3166CountyCodeIQ ISO3166CountyCode = "IQ"

	ISO3166CountyCodeIE ISO3166CountyCode = "IE"

	ISO3166CountyCodeIM ISO3166CountyCode = "IM"

	ISO3166CountyCodeIL ISO3166CountyCode = "IL"

	ISO3166CountyCodeIT ISO3166CountyCode = "IT"

	ISO3166CountyCodeJM ISO3166CountyCode = "JM"

	ISO3166CountyCodeJP ISO3166CountyCode = "JP"

	ISO3166CountyCodeJE ISO3166CountyCode = "JE"

	ISO3166CountyCodeJO ISO3166CountyCode = "JO"

	ISO3166CountyCodeKZ ISO3166CountyCode = "KZ"

	ISO3166CountyCodeKE ISO3166CountyCode = "KE"

	ISO3166CountyCodeKI ISO3166CountyCode = "KI"

	ISO3166CountyCodeKP ISO3166CountyCode = "KP"

	ISO3166CountyCodeKR ISO3166CountyCode = "KR"

	ISO3166CountyCodeKW ISO3166CountyCode = "KW"

	ISO3166CountyCodeKG ISO3166CountyCode = "KG"

	ISO3166CountyCodeLA ISO3166CountyCode = "LA"

	ISO3166CountyCodeLV ISO3166CountyCode = "LV"

	ISO3166CountyCodeLB ISO3166CountyCode = "LB"

	ISO3166CountyCodeLS ISO3166CountyCode = "LS"

	ISO3166CountyCodeLR ISO3166CountyCode = "LR"

	ISO3166CountyCodeLY ISO3166CountyCode = "LY"

	ISO3166CountyCodeLI ISO3166CountyCode = "LI"

	ISO3166CountyCodeLT ISO3166CountyCode = "LT"

	ISO3166CountyCodeLU ISO3166CountyCode = "LU"

	ISO3166CountyCodeMO ISO3166CountyCode = "MO"

	ISO3166CountyCodeMK ISO3166CountyCode = "MK"

	ISO3166CountyCodeMG ISO3166CountyCode = "MG"

	ISO3166CountyCodeMW ISO3166CountyCode = "MW"

	ISO3166CountyCodeMY ISO3166CountyCode = "MY"

	ISO3166CountyCodeMV ISO3166CountyCode = "MV"

	ISO3166CountyCodeML ISO3166CountyCode = "ML"

	ISO3166CountyCodeMT ISO3166CountyCode = "MT"

	ISO3166CountyCodeMH ISO3166CountyCode = "MH"

	ISO3166CountyCodeMQ ISO3166CountyCode = "MQ"

	ISO3166CountyCodeMR ISO3166CountyCode = "MR"

	ISO3166CountyCodeMU ISO3166CountyCode = "MU"

	ISO3166CountyCodeYT ISO3166CountyCode = "YT"

	ISO3166CountyCodeMX ISO3166CountyCode = "MX"

	ISO3166CountyCodeFM ISO3166CountyCode = "FM"

	ISO3166CountyCodeMD ISO3166CountyCode = "MD"

	ISO3166CountyCodeMC ISO3166CountyCode = "MC"

	ISO3166CountyCodeMN ISO3166CountyCode = "MN"

	ISO3166CountyCodeMS ISO3166CountyCode = "MS"

	ISO3166CountyCodeMA ISO3166CountyCode = "MA"

	ISO3166CountyCodeMZ ISO3166CountyCode = "MZ"

	ISO3166CountyCodeMM ISO3166CountyCode = "MM"

	ISO3166CountyCodeNA ISO3166CountyCode = "NA"

	ISO3166CountyCodeNR ISO3166CountyCode = "NR"

	ISO3166CountyCodeNP ISO3166CountyCode = "NP"

	ISO3166CountyCodeNL ISO3166CountyCode = "NL"

	ISO3166CountyCodeAN ISO3166CountyCode = "AN"

	ISO3166CountyCodeNC ISO3166CountyCode = "NC"

	ISO3166CountyCodeNZ ISO3166CountyCode = "NZ"

	ISO3166CountyCodeNI ISO3166CountyCode = "NI"

	ISO3166CountyCodeNE ISO3166CountyCode = "NE"

	ISO3166CountyCodeNG ISO3166CountyCode = "NG"

	ISO3166CountyCodeNU ISO3166CountyCode = "NU"

	ISO3166CountyCodeNF ISO3166CountyCode = "NF"

	ISO3166CountyCodeMP ISO3166CountyCode = "MP"

	ISO3166CountyCodeNO ISO3166CountyCode = "NO"

	ISO3166CountyCodeOM ISO3166CountyCode = "OM"

	ISO3166CountyCodePK ISO3166CountyCode = "PK"

	ISO3166CountyCodePW ISO3166CountyCode = "PW"

	ISO3166CountyCodePS ISO3166CountyCode = "PS"

	ISO3166CountyCodePA ISO3166CountyCode = "PA"

	ISO3166CountyCodePG ISO3166CountyCode = "PG"

	ISO3166CountyCodePY ISO3166CountyCode = "PY"

	ISO3166CountyCodePE ISO3166CountyCode = "PE"

	ISO3166CountyCodePH ISO3166CountyCode = "PH"

	ISO3166CountyCodePN ISO3166CountyCode = "PN"

	ISO3166CountyCodePL ISO3166CountyCode = "PL"

	ISO3166CountyCodePT ISO3166CountyCode = "PT"

	ISO3166CountyCodePR ISO3166CountyCode = "PR"

	ISO3166CountyCodeQA ISO3166CountyCode = "QA"

	ISO3166CountyCodeRE ISO3166CountyCode = "RE"

	ISO3166CountyCodeRO ISO3166CountyCode = "RO"

	ISO3166CountyCodeRU ISO3166CountyCode = "RU"

	ISO3166CountyCodeRW ISO3166CountyCode = "RW"

	ISO3166CountyCodeSH ISO3166CountyCode = "SH"

	ISO3166CountyCodeKN ISO3166CountyCode = "KN"

	ISO3166CountyCodeLC ISO3166CountyCode = "LC"

	ISO3166CountyCodePM ISO3166CountyCode = "PM"

	ISO3166CountyCodeVC ISO3166CountyCode = "VC"

	ISO3166CountyCodeWS ISO3166CountyCode = "WS"

	ISO3166CountyCodeSM ISO3166CountyCode = "SM"

	ISO3166CountyCodeST ISO3166CountyCode = "ST"

	ISO3166CountyCodeSA ISO3166CountyCode = "SA"

	ISO3166CountyCodeSN ISO3166CountyCode = "SN"

	ISO3166CountyCodeCS ISO3166CountyCode = "CS"

	ISO3166CountyCodeSC ISO3166CountyCode = "SC"

	ISO3166CountyCodeSL ISO3166CountyCode = "SL"

	ISO3166CountyCodeSG ISO3166CountyCode = "SG"

	ISO3166CountyCodeSK ISO3166CountyCode = "SK"

	ISO3166CountyCodeSI ISO3166CountyCode = "SI"

	ISO3166CountyCodeSB ISO3166CountyCode = "SB"

	ISO3166CountyCodeSO ISO3166CountyCode = "SO"

	ISO3166CountyCodeZA ISO3166CountyCode = "ZA"

	ISO3166CountyCodeGS ISO3166CountyCode = "GS"

	ISO3166CountyCodeES ISO3166CountyCode = "ES"

	ISO3166CountyCodeLK ISO3166CountyCode = "LK"

	ISO3166CountyCodeSD ISO3166CountyCode = "SD"

	ISO3166CountyCodeSR ISO3166CountyCode = "SR"

	ISO3166CountyCodeSJ ISO3166CountyCode = "SJ"

	ISO3166CountyCodeSZ ISO3166CountyCode = "SZ"

	ISO3166CountyCodeSE ISO3166CountyCode = "SE"

	ISO3166CountyCodeCH ISO3166CountyCode = "CH"

	ISO3166CountyCodeSY ISO3166CountyCode = "SY"

	ISO3166CountyCodeTW ISO3166CountyCode = "TW"

	ISO3166CountyCodeTJ ISO3166CountyCode = "TJ"

	ISO3166CountyCodeTZ ISO3166CountyCode = "TZ"

	ISO3166CountyCodeTH ISO3166CountyCode = "TH"

	ISO3166CountyCodeTL ISO3166CountyCode = "TL"

	ISO3166CountyCodeTG ISO3166CountyCode = "TG"

	ISO3166CountyCodeTK ISO3166CountyCode = "TK"

	ISO3166CountyCodeTO ISO3166CountyCode = "TO"

	ISO3166CountyCodeTT ISO3166CountyCode = "TT"

	ISO3166CountyCodeTN ISO3166CountyCode = "TN"

	ISO3166CountyCodeTR ISO3166CountyCode = "TR"

	ISO3166CountyCodeTM ISO3166CountyCode = "TM"

	ISO3166CountyCodeTC ISO3166CountyCode = "TC"

	ISO3166CountyCodeTV ISO3166CountyCode = "TV"

	ISO3166CountyCodeUG ISO3166CountyCode = "UG"

	ISO3166CountyCodeUA ISO3166CountyCode = "UA"

	ISO3166CountyCodeAE ISO3166CountyCode = "AE"

	ISO3166CountyCodeGB ISO3166CountyCode = "GB"

	ISO3166CountyCodeUS ISO3166CountyCode = "US"

	ISO3166CountyCodeUM ISO3166CountyCode = "UM"

	ISO3166CountyCodeUY ISO3166CountyCode = "UY"

	ISO3166CountyCodeUZ ISO3166CountyCode = "UZ"

	ISO3166CountyCodeVU ISO3166CountyCode = "VU"

	ISO3166CountyCodeVE ISO3166CountyCode = "VE"

	ISO3166CountyCodeVN ISO3166CountyCode = "VN"

	ISO3166CountyCodeVG ISO3166CountyCode = "VG"

	ISO3166CountyCodeVI ISO3166CountyCode = "VI"

	ISO3166CountyCodeWF ISO3166CountyCode = "WF"

	ISO3166CountyCodeEH ISO3166CountyCode = "EH"

	ISO3166CountyCodeYE ISO3166CountyCode = "YE"

	ISO3166CountyCodeZM ISO3166CountyCode = "ZM"

	ISO3166CountyCodeZW ISO3166CountyCode = "ZW"
)

type SpecificationTypeEnum string

const (
	SpecificationTypeEnumLength SpecificationTypeEnum = "Length"

	SpecificationTypeEnumThickness SpecificationTypeEnum = "Thickness"

	SpecificationTypeEnumRadius SpecificationTypeEnum = "Radius"

	SpecificationTypeEnumVolume SpecificationTypeEnum = "Volume"

	SpecificationTypeEnumCapacity SpecificationTypeEnum = "Capacity"

	SpecificationTypeEnumMemory SpecificationTypeEnum = "Memory"

	SpecificationTypeEnumDataPorts SpecificationTypeEnum = "Data Ports"

	SpecificationTypeEnumCapacitance SpecificationTypeEnum = "Capacitance"

	SpecificationTypeEnumVoltage SpecificationTypeEnum = "Voltage"

	SpecificationTypeEnumPointSize SpecificationTypeEnum = "Point Size"

	SpecificationTypeEnumSheetSize SpecificationTypeEnum = "Sheet Size"

	SpecificationTypeEnumSheetCount SpecificationTypeEnum = "Sheet Count"

	SpecificationTypeEnumPockets SpecificationTypeEnum = "Pockets"

	SpecificationTypeEnumInseam SpecificationTypeEnum = "Inseam"

	SpecificationTypeEnumBust SpecificationTypeEnum = "Bust"

	SpecificationTypeEnumChest SpecificationTypeEnum = "Chest"

	SpecificationTypeEnumWaist SpecificationTypeEnum = "Waist"

	SpecificationTypeEnumHips SpecificationTypeEnum = "Hips"

	SpecificationTypeEnumCup SpecificationTypeEnum = "Cup"

	SpecificationTypeEnumRise SpecificationTypeEnum = "Rise"

	SpecificationTypeEnumNeck SpecificationTypeEnum = "Neck"

	SpecificationTypeEnumThigh SpecificationTypeEnum = "Thigh"

	SpecificationTypeEnumShoulders SpecificationTypeEnum = "Shoulders"

	SpecificationTypeEnumSleeve SpecificationTypeEnum = "Sleeve"

	SpecificationTypeEnumDeviceSize SpecificationTypeEnum = "Device Size"
)

type ApparelStyleEnum string

const (
	ApparelStyleEnumUnisex ApparelStyleEnum = "Unisex"

	ApparelStyleEnumYouth ApparelStyleEnum = "Youth"

	ApparelStyleEnumGirls ApparelStyleEnum = "Girls"

	ApparelStyleEnumBoys ApparelStyleEnum = "Boys"

	ApparelStyleEnumWomens ApparelStyleEnum = "Womens"

	ApparelStyleEnumWomensTall ApparelStyleEnum = "WomensTall"

	ApparelStyleEnumMens ApparelStyleEnum = "Mens"

	ApparelStyleEnumMensTall ApparelStyleEnum = "MensTall"
)

type LabelSizeEnum string

const (
	LabelSizeEnumOSFA LabelSizeEnum = "OSFA"

	LabelSizeEnum6XS LabelSizeEnum = "6XS"

	LabelSizeEnum5XS LabelSizeEnum = "5XS"

	LabelSizeEnum4XS LabelSizeEnum = "4XS"

	LabelSizeEnum3XS LabelSizeEnum = "3XS"

	LabelSizeEnum2XS LabelSizeEnum = "2XS"

	LabelSizeEnumXS LabelSizeEnum = "XS"

	LabelSizeEnumS LabelSizeEnum = "S"

	LabelSizeEnumM LabelSizeEnum = "M"

	LabelSizeEnumL LabelSizeEnum = "L"

	LabelSizeEnumXL LabelSizeEnum = "XL"

	LabelSizeEnum2XL LabelSizeEnum = "2XL"

	LabelSizeEnum3XL LabelSizeEnum = "3XL"

	LabelSizeEnum4XL LabelSizeEnum = "4XL"

	LabelSizeEnum5XL LabelSizeEnum = "5XL"

	LabelSizeEnum6XL LabelSizeEnum = "6XL"

	LabelSizeEnumCUSTOM LabelSizeEnum = "CUSTOM"
)

type DimensionUomEnum string

const (
	DimensionUomEnumMM DimensionUomEnum = "MM"

	DimensionUomEnumCM DimensionUomEnum = "CM"

	DimensionUomEnumMR DimensionUomEnum = "MR"

	DimensionUomEnumIN DimensionUomEnum = "IN"

	DimensionUomEnumFT DimensionUomEnum = "FT"

	DimensionUomEnumYD DimensionUomEnum = "YD"
)

type WeightUomEnum string

const (
	WeightUomEnumME WeightUomEnum = "ME"

	WeightUomEnumKG WeightUomEnum = "KG"

	WeightUomEnumOZ WeightUomEnum = "OZ"

	WeightUomEnumLB WeightUomEnum = "LB"
)

type RelationTypeEnum string

const (
	RelationTypeEnumSubstitute RelationTypeEnum = "Substitute"

	RelationTypeEnumCompanionSell RelationTypeEnum = "Companion Sell"

	RelationTypeEnumCommonGrouping RelationTypeEnum = "Common Grouping"
)

type ChangeTimeStamp time.Time

type ErrorMessage struct {
	XMLName xml.Name `xml:"http://www.promostandards.org/WSDL/ProductDataService/1.0.0/SharedObjects/ ErrorMessage"`

	//
	// Response for any error requiring notification to requestor
	//
	Code int32 `xml:"code,omitempty" json:"code,omitempty"`

	//
	// Response for any error requiring notification to requestor

	Description string `xml:"description,omitempty" json:"description,omitempty"`
}

type EndDate time.Time

type EffectiveDate time.Time

type IsCaution bool

type IsSellable bool

type IsCloseout bool

type Depth float64

type Height float64

type Weight float64

type Width float64

type Quantity float64

type ApparelSize struct {
	XMLName xml.Name `xml:"http://www.promostandards.org/WSDL/ProductDataService/1.0.0/SharedObjects/ ApparelSize"`

	// Ladies, Men, Youth, etc.

	ApparelStyle *ApparelStyleEnum `xml:"apparelStyle,omitempty" json:"apparelStyle,omitempty"`

	// The apparel items tagged size. e.g. XSmall, Small, etc.

	LabelSize *LabelSizeEnum `xml:"labelSize,omitempty" json:"labelSize,omitempty"`

	// Used to communicate custom size when labelSize is CUSTOM.

	CustomSize string `xml:"customSize,omitempty" json:"customSize,omitempty"`
}

type SizeApparelArray struct {
	XMLName xml.Name `xml:"http://www.promostandards.org/WSDL/ProductDataService/1.0.0/SharedObjects/ SizeApparelArray"`

	SizeApparel []struct {

		// Ladies, Men, Youth, etc.
		ApparelStyle *ApparelStyleEnum `xml:"apparelStyle,omitempty" json:"apparelStyle,omitempty"`

		// The apparel items tagged size. e.g. XSmall, Small, etc.
		LabelSize *LabelSizeEnum `xml:"labelSize,omitempty" json:"labelSize,omitempty"`
	} `xml:"SizeApparel,omitempty" json:"SizeApparel,omitempty"`
}

type GetProductRequest struct {
	XMLName xml.Name `xml:"http://www.promostandards.org/WSDL/ProductDataService/1.0.0/ GetProductRequest"`

	WsVersion *WsVersion `xml:"wsVersion,omitempty" json:"wsVersion,omitempty"`

	Id *Id `xml:"id,omitempty" json:"id,omitempty"`

	Password *Password `xml:"password,omitempty" json:"password,omitempty"`

	LocalizationCountry *LocalizationCountry `xml:"localizationCountry,omitempty" json:"localizationCountry,omitempty"`

	LocalizationLanguage *LocalizationLanguage `xml:"localizationLanguage,omitempty" json:"localizationLanguage,omitempty"`

	ProductId *ProductId `xml:"productId,omitempty" json:"productId,omitempty"`

	PartId *PartId `xml:"partId,omitempty" json:"partId,omitempty"`

	// A specific part color for this product

	ColorName string `xml:"colorName,omitempty" json:"colorName,omitempty"`

	ApparelSizeArray struct {
		ApparelSize []*ApparelSize `xml:"ApparelSize,omitempty" json:"ApparelSize,omitempty"`
	} `xml:"ApparelSizeArray,omitempty" json:"ApparelSizeArray,omitempty"`
}

type ShipmentDestinationTypeType string

const (
	ShipmentDestinationTypeTypeCommercial ShipmentDestinationTypeType = "Commercial"

	ShipmentDestinationTypeTypeResidential ShipmentDestinationTypeType = "Residential"

	ShipmentDestinationTypeTypeNone ShipmentDestinationTypeType = "None"
)

type DimUOMType string

const (
	DimUOMTypeInches DimUOMType = "Inches"

	DimUOMTypeFeet DimUOMType = "Feet"

	DimUOMTypeMm DimUOMType = "mm"

	DimUOMTypeCm DimUOMType = "cm"

	DimUOMTypeMeters DimUOMType = "Meters"
)

type WeightUOMType string

const (
	WeightUOMTypeOunces WeightUOMType = "Ounces"

	WeightUOMTypePounds WeightUOMType = "Pounds"

	WeightUOMTypeGrams WeightUOMType = "Grams"

	WeightUOMTypeKG WeightUOMType = "KG"
)

type Dimension struct {
	XMLName xml.Name `xml:"http://www.promostandards.org/WSDL/ProductDataService/1.0.0/ Dimension"`

	DimensionUom *DimensionUom `xml:"dimensionUom,omitempty" json:"dimensionUom,omitempty"`

	Depth *Depth `xml:"depth,omitempty" json:"depth,omitempty"`

	Height *Height `xml:"height,omitempty" json:"height,omitempty"`

	Width *Width `xml:"width,omitempty" json:"width,omitempty"`

	WeightUom *WeightUom `xml:"weightUom,omitempty" json:"weightUom,omitempty"`

	Weight *Weight `xml:"weight,omitempty" json:"weight,omitempty"`
}

type ProductPackage struct {
	XMLName xml.Name `xml:"http://www.promostandards.org/WSDL/ProductDataService/1.0.0/ ProductPackage"`

	// Defalult packaging
	Default_ bool `xml:"default,omitempty" json:"default,omitempty"`

	PackageType *PackageType `xml:"packageType,omitempty" json:"packageType,omitempty"`

	Description *Description `xml:"description,omitempty" json:"description,omitempty"`

	Quantity *Quantity `xml:"quantity,omitempty" json:"quantity,omitempty"`

	DimensionUom *DimensionUom `xml:"dimensionUom,omitempty" json:"dimensionUom,omitempty"`

	Depth *Depth `xml:"depth,omitempty" json:"depth,omitempty"`

	Height *Height `xml:"height,omitempty" json:"height,omitempty"`

	Width *Width `xml:"width,omitempty" json:"width,omitempty"`

	WeightUom *WeightUom `xml:"weightUom,omitempty" json:"weightUom,omitempty"`

	Weight *Weight `xml:"weight,omitempty" json:"weight,omitempty"`
}

type ShippingPackage struct {
	XMLName xml.Name `xml:"http://www.promostandards.org/WSDL/ProductDataService/1.0.0/ ShippingPackage"`

	PackageType *PackageType `xml:"packageType,omitempty" json:"packageType,omitempty"`

	Description *Description `xml:"description,omitempty" json:"description,omitempty"`

	Quantity *Quantity `xml:"quantity,omitempty" json:"quantity,omitempty"`

	DimensionUom *DimensionUom `xml:"dimensionUom,omitempty" json:"dimensionUom,omitempty"`

	Depth *Depth `xml:"depth,omitempty" json:"depth,omitempty"`

	Height *Height `xml:"height,omitempty" json:"height,omitempty"`

	Width *Width `xml:"width,omitempty" json:"width,omitempty"`

	WeightUom *WeightUom `xml:"weightUom,omitempty" json:"weightUom,omitempty"`

	Weight *Weight `xml:"weight,omitempty" json:"weight,omitempty"`
}

type Specification struct {
	XMLName xml.Name `xml:"http://www.promostandards.org/WSDL/ProductDataService/1.0.0/ Specification"`

	// The type of size

	SpecificationType *SpecificationTypeEnum `xml:"specificationType,omitempty" json:"specificationType,omitempty"`

	// Specification UOM

	SpecificationUom string `xml:"SpecificationUom,omitempty" json:"SpecificationUom,omitempty"`

	// Specification Measurement Value.

	MeasurementValue string `xml:"measurementValue,omitempty" json:"measurementValue,omitempty"`
}

type ProductCategory struct {
	XMLName xml.Name `xml:"http://www.promostandards.org/WSDL/ProductDataService/1.0.0/ ProductCategory"`

	// Product category

	Category string `xml:"category,omitempty" json:"category,omitempty"`

	// Product subcategory

	SubCategory string `xml:"subCategory,omitempty" json:"subCategory,omitempty"`
}

type RelatedProduct struct {
	XMLName xml.Name `xml:"http://www.promostandards.org/WSDL/ProductDataService/1.0.0/ RelatedProduct"`

	// The relationship type between two products

	RelationType *RelationTypeEnum `xml:"relationType,omitempty" json:"relationType,omitempty"`

	ProductId *ProductId `xml:"productId,omitempty" json:"productId,omitempty"`

	PartId *PartId `xml:"partId,omitempty" json:"partId,omitempty"`
}

type ProductKeyword struct {
	XMLName xml.Name `xml:"http://www.promostandards.org/WSDL/ProductDataService/1.0.0/ ProductKeyword"`

	// A product keyword commonly utilized for search or other functions

	Keyword string `xml:"keyword,omitempty" json:"keyword,omitempty"`
}

type ProductMarketingPoint struct {
	XMLName xml.Name `xml:"http://www.promostandards.org/WSDL/ProductDataService/1.0.0/ ProductMarketingPoint"`

	// Basic category or type of Marketing point being made.  e.g. Highlights, Size, Safety

	PointType string `xml:"pointType,omitempty" json:"pointType,omitempty"`

	// Marketing bullet or point copy

	PointCopy string `xml:"pointCopy,omitempty" json:"pointCopy,omitempty"`
}

type Color struct {
	XMLName xml.Name `xml:"http://www.promostandards.org/WSDL/ProductDataService/1.0.0/ Color"`

	// Supplier specific color name.  Go to market color

	ColorName string `xml:"colorName,omitempty" json:"colorName,omitempty"`

	// The HEX code representation .  This is not a supplement for product color but data used for generating web user interfaces

	Hex string `xml:"hex,omitempty" json:"hex,omitempty"`

	// The PMS code representation.  This is not a supplement for product color.

	ApproximatePms string `xml:"approximatePms,omitempty" json:"approximatePms,omitempty"`
}

type Product struct {
	XMLName xml.Name `xml:"http://www.promostandards.org/WSDL/ProductDataService/1.0.0/ Product"`

	ProductId *ProductId `xml:"productId,omitempty" json:"productId,omitempty"`

	// The supplier name for the product

	ProductName string `xml:"productName,omitempty" json:"productName,omitempty"`

	Description []*Description `xml:"description,omitempty" json:"description,omitempty"`

	ProductMarketingPointArray struct {
		ProductMarketingPoint []*ProductMarketingPoint `xml:"ProductMarketingPoint,omitempty" json:"ProductMarketingPoint,omitempty"`
	} `xml:"ProductMarketingPointArray,omitempty" json:"ProductMarketingPointArray,omitempty"`

	ProductKeywordArray struct {
		ProductKeyword []*ProductKeyword `xml:"ProductKeyword,omitempty" json:"ProductKeyword,omitempty"`
	} `xml:"ProductKeywordArray,omitempty" json:"ProductKeywordArray,omitempty"`

	// Product Brand

	ProductBrand string `xml:"productBrand,omitempty" json:"productBrand,omitempty"`

	// Product status for export
	Export bool `xml:"export,omitempty" json:"export,omitempty"`

	ProductCategoryArray struct {
		ProductCategory []*ProductCategory `xml:"ProductCategory,omitempty" json:"ProductCategory,omitempty"`
	} `xml:"ProductCategoryArray,omitempty" json:"ProductCategoryArray,omitempty"`

	RelatedProductArray struct {
		RelatedProduct []*RelatedProduct `xml:"RelatedProduct,omitempty" json:"RelatedProduct,omitempty"`
	} `xml:"RelatedProductArray,omitempty" json:"RelatedProductArray,omitempty"`

	ProductPartArray struct {
		ProductPart []struct {
			PartId *PartId `xml:"partId,omitempty" json:"partId,omitempty"`

			Description []*Description `xml:"description,omitempty" json:"description,omitempty"`

			CountryOfOrigin *CountryOfOrigin `xml:"countryOfOrigin,omitempty" json:"countryOfOrigin,omitempty"`

			ColorArray struct {
				Color []*Color `xml:"Color,omitempty" json:"Color,omitempty"`
			} `xml:"ColorArray,omitempty" json:"ColorArray,omitempty"`

			// Primary material of construction

			PrimaryMaterial string `xml:"primaryMaterial,omitempty" json:"primaryMaterial,omitempty"`

			SpecificationArray struct {
				Specification []*Specification `xml:"Specification,omitempty" json:"Specification,omitempty"`
			} `xml:"SpecificationArray,omitempty" json:"SpecificationArray,omitempty"`

			// General shape

			Shape string `xml:"shape,omitempty" json:"shape,omitempty"`

			ApparelSize *ApparelSize `xml:"ApparelSize,omitempty" json:"ApparelSize,omitempty"`

			Dimension *Dimension `xml:"Dimension,omitempty" json:"Dimension,omitempty"`

			// Lead time in days
			LeadTime int32 `xml:"leadTime,omitempty" json:"leadTime,omitempty"`

			// United Nations Standard Products and Services Code (UNSPSC)

			Unspsc string `xml:"unspsc,omitempty" json:"unspsc,omitempty"`

			// Global Trade Item Number (GTIN)

			Gtin string `xml:"gtin,omitempty" json:"gtin,omitempty"`

			// Part specific rush service
			IsRushService bool `xml:"isRushService,omitempty" json:"isRushService,omitempty"`

			ProductPackagingArray struct {
				ProductPackage []*ProductPackage `xml:"ProductPackage,omitempty" json:"ProductPackage,omitempty"`
			} `xml:"ProductPackagingArray,omitempty" json:"ProductPackagingArray,omitempty"`

			ShippingPackageArray struct {
				ShippingPackage []*ShippingPackage `xml:"ShippingPackage,omitempty" json:"ShippingPackage,omitempty"`
			} `xml:"ShippingPackageArray,omitempty" json:"ShippingPackageArray,omitempty"`

			EndDate *EndDate `xml:"endDate,omitempty" json:"endDate,omitempty"`

			EffectiveDate *EffectiveDate `xml:"effectiveDate,omitempty" json:"effectiveDate,omitempty"`

			IsCloseout *IsCloseout `xml:"isCloseout,omitempty" json:"isCloseout,omitempty"`

			IsCaution *IsCaution `xml:"isCaution,omitempty" json:"isCaution,omitempty"`

			CautionComment *CautionComment `xml:"cautionComment,omitempty" json:"cautionComment,omitempty"`

			// National Motor Freight Classification Code
			NmfcCode float64 `xml:"nmfcCode,omitempty" json:"nmfcCode,omitempty"`

			// National Motor Freight Classification Description

			NmfcDescription string `xml:"nmfcDescription,omitempty" json:"nmfcDescription,omitempty"`

			// National Motor Freight Classification Number

			NmfcNumber string `xml:"nmfcNumber,omitempty" json:"nmfcNumber,omitempty"`

			// Manufactured on demand / Made to order
			IsOnDemand bool `xml:"isOnDemand,omitempty" json:"isOnDemand,omitempty"`

			// Contains hazardous material
			IsHazmat bool `xml:"isHazmat,omitempty" json:"isHazmat,omitempty"`
		} `xml:"ProductPart,omitempty" json:"ProductPart,omitempty"`
	} `xml:"ProductPartArray,omitempty" json:"ProductPartArray,omitempty"`

	// The date time stamp of the most recent change
	LastChangeDate time.Time `xml:"lastChangeDate,omitempty" json:"lastChangeDate,omitempty"`

	// The date time stamp when this products data initially became available
	CreationDate time.Time `xml:"creationDate,omitempty" json:"creationDate,omitempty"`

	EndDate *EndDate `xml:"endDate,omitempty" json:"endDate,omitempty"`

	EffectiveDate *EffectiveDate `xml:"effectiveDate,omitempty" json:"effectiveDate,omitempty"`

	IsCaution *IsCaution `xml:"isCaution,omitempty" json:"isCaution,omitempty"`

	CautionComment *CautionComment `xml:"cautionComment,omitempty" json:"cautionComment,omitempty"`

	IsCloseout *IsCloseout `xml:"isCloseout,omitempty" json:"isCloseout,omitempty"`

	// Line Name / Division to which this product belongs

	LineName string `xml:"lineName,omitempty" json:"lineName,omitempty"`
}

type GetProductResponse struct {
	XMLName xml.Name `xml:"http://www.promostandards.org/WSDL/ProductDataService/1.0.0/ GetProductResponse"`

	Product *Product `xml:"Product,omitempty" json:"Product,omitempty"`

	ErrorMessage *ErrorMessage `xml:"ErrorMessage,omitempty" json:"ErrorMessage,omitempty"`
}

type GetProductDateModifiedRequest struct {
	XMLName xml.Name `xml:"http://www.promostandards.org/WSDL/ProductDataService/1.0.0/ GetProductDateModifiedRequest"`

	WsVersion *WsVersion `xml:"wsVersion,omitempty" json:"wsVersion,omitempty"`

	Id *Id `xml:"id,omitempty" json:"id,omitempty"`

	Password *Password `xml:"password,omitempty" json:"password,omitempty"`

	ChangeTimeStamp *ChangeTimeStamp `xml:"changeTimeStamp,omitempty" json:"changeTimeStamp,omitempty"`
}

type ProductDateModified struct {
	XMLName xml.Name `xml:"http://www.promostandards.org/WSDL/ProductDataService/1.0.0/ ProductDateModified"`

	ProductId *ProductId `xml:"productId,omitempty" json:"productId,omitempty"`

	PartId *PartId `xml:"partId,omitempty" json:"partId,omitempty"`
}

type GetProductDateModifiedResponse struct {
	XMLName xml.Name `xml:"http://www.promostandards.org/WSDL/ProductDataService/1.0.0/ GetProductDateModifiedResponse"`

	ProductDateModifiedArray struct {
		ProductDateModified []*ProductDateModified `xml:"ProductDateModified,omitempty" json:"ProductDateModified,omitempty"`
	} `xml:"ProductDateModifiedArray,omitempty" json:"ProductDateModifiedArray,omitempty"`

	ErrorMessage *ErrorMessage `xml:"ErrorMessage,omitempty" json:"ErrorMessage,omitempty"`
}

type GetProductCloseOutRequest struct {
	XMLName xml.Name `xml:"http://www.promostandards.org/WSDL/ProductDataService/1.0.0/ GetProductCloseOutRequest"`

	WsVersion *WsVersion `xml:"wsVersion,omitempty" json:"wsVersion,omitempty"`

	Id *Id `xml:"id,omitempty" json:"id,omitempty"`

	Password *Password `xml:"password,omitempty" json:"password,omitempty"`
}

type ProductCloseOut struct {
	XMLName xml.Name `xml:"http://www.promostandards.org/WSDL/ProductDataService/1.0.0/ ProductCloseOut"`

	ProductId *ProductId `xml:"productId,omitempty" json:"productId,omitempty"`

	PartId *PartId `xml:"partId,omitempty" json:"partId,omitempty"`
}

type GetProductCloseOutResponse struct {
	XMLName xml.Name `xml:"http://www.promostandards.org/WSDL/ProductDataService/1.0.0/ GetProductCloseOutResponse"`

	ProductCloseOutArray struct {
		ProductCloseOut []*ProductCloseOut `xml:"ProductCloseOut,omitempty" json:"ProductCloseOut,omitempty"`
	} `xml:"ProductCloseOutArray,omitempty" json:"ProductCloseOutArray,omitempty"`

	ErrorMessage *ErrorMessage `xml:"ErrorMessage,omitempty" json:"ErrorMessage,omitempty"`
}

type GetProductSellableRequest struct {
	XMLName xml.Name `xml:"http://www.promostandards.org/WSDL/ProductDataService/1.0.0/ GetProductSellableRequest"`

	WsVersion *WsVersion `xml:"wsVersion,omitempty" json:"wsVersion,omitempty"`

	Id *Id `xml:"id,omitempty" json:"id,omitempty"`

	Password *Password `xml:"password,omitempty" json:"password,omitempty"`

	ProductId *ProductId `xml:"productId,omitempty" json:"productId,omitempty"`

	PartId *PartId `xml:"partId,omitempty" json:"partId,omitempty"`

	IsSellable *IsSellable `xml:"isSellable,omitempty" json:"isSellable,omitempty"`
}

type GetProductSellableResponse struct {
	XMLName xml.Name `xml:"http://www.promostandards.org/WSDL/ProductDataService/1.0.0/ GetProductSellableResponse"`

	ProductSellableArray struct {
		ProductSellable []struct {
			ProductId *ProductId `xml:"productId,omitempty" json:"productId,omitempty"`

			PartId *PartId `xml:"partId,omitempty" json:"partId,omitempty"`
		} `xml:"ProductSellable,omitempty" json:"ProductSellable,omitempty"`
	} `xml:"ProductSellableArray,omitempty" json:"ProductSellableArray,omitempty"`

	ErrorMessage *ErrorMessage `xml:"ErrorMessage,omitempty" json:"ErrorMessage,omitempty"`
}

type ProductDataService interface {
	GetProduct(request *GetProductRequest) (*GetProductResponse, error)

	GetProductContext(ctx context.Context, request *GetProductRequest) (*GetProductResponse, error)

	GetProductDateModified(request *GetProductDateModifiedRequest) (*GetProductDateModifiedResponse, error)

	GetProductDateModifiedContext(ctx context.Context, request *GetProductDateModifiedRequest) (*GetProductDateModifiedResponse, error)

	GetProductCloseOut(request *GetProductCloseOutRequest) (*GetProductCloseOutResponse, error)

	GetProductCloseOutContext(ctx context.Context, request *GetProductCloseOutRequest) (*GetProductCloseOutResponse, error)

	GetProductSellable(request *GetProductSellableRequest) (*GetProductSellableResponse, error)

	GetProductSellableContext(ctx context.Context, request *GetProductSellableRequest) (*GetProductSellableResponse, error)
}

type productDataService struct {
	client *soap.Client
}

func NewProductDataService(client *soap.Client) ProductDataService {
	return &productDataService{
		client: client,
	}
}

func (service *productDataService) GetProductContext(ctx context.Context, request *GetProductRequest) (*GetProductResponse, error) {
	response := new(GetProductResponse)
	err := service.client.CallContext(ctx, "getProduct", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *productDataService) GetProduct(request *GetProductRequest) (*GetProductResponse, error) {
	return service.GetProductContext(
		context.Background(),
		request,
	)
}

func (service *productDataService) GetProductDateModifiedContext(ctx context.Context, request *GetProductDateModifiedRequest) (*GetProductDateModifiedResponse, error) {
	response := new(GetProductDateModifiedResponse)
	err := service.client.CallContext(ctx, "getProductDateModified", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *productDataService) GetProductDateModified(request *GetProductDateModifiedRequest) (*GetProductDateModifiedResponse, error) {
	return service.GetProductDateModifiedContext(
		context.Background(),
		request,
	)
}

func (service *productDataService) GetProductCloseOutContext(ctx context.Context, request *GetProductCloseOutRequest) (*GetProductCloseOutResponse, error) {
	response := new(GetProductCloseOutResponse)
	err := service.client.CallContext(ctx, "getProductCloseOut", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *productDataService) GetProductCloseOut(request *GetProductCloseOutRequest) (*GetProductCloseOutResponse, error) {
	return service.GetProductCloseOutContext(
		context.Background(),
		request,
	)
}

func (service *productDataService) GetProductSellableContext(ctx context.Context, request *GetProductSellableRequest) (*GetProductSellableResponse, error) {
	response := new(GetProductSellableResponse)
	err := service.client.CallContext(ctx, "getProductSellable", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *productDataService) GetProductSellable(request *GetProductSellableRequest) (*GetProductSellableResponse, error) {
	return service.GetProductSellableContext(
		context.Background(),
		request,
	)
}
