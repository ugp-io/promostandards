// Code generated by gowsdl DO NOT EDIT.

package myservice

import (
	"context"
	"encoding/xml"
	"github.com/hooklift/gowsdl/soap"
	"time"
)

// against "unused imports"
var _ time.Time
var _ xml.Name

type AnyType struct {
	InnerXML string `xml:",innerxml"`
}

type AnyURI string

type NCName string

type GetProductsWithRegulationsRequest struct {
	XMLName xml.Name `xml:"http://www.promostandards.org/WSDL/ProductComplianceService/1.0.0/ GetProductsWithRegulationsRequest"`

	//
	// The Standard Version of the Web Service being referenced
	//

	WsVersion string `xml:"wsVersion,omitempty" json:"wsVersion,omitempty"`

	//
	// The customer Id or any other agreed upon Id.

	Id string `xml:"id,omitempty" json:"id,omitempty"`

	// The password associated with the Id
	//

	Password string `xml:"password,omitempty" json:"password,omitempty"`

	// Beginning date time since last change in UTC
	ChangeTimeStamp time.Time `xml:"changeTimeStamp,omitempty" json:"changeTimeStamp,omitempty"`
}

// The severity type

type SeverityType string

const (
	SeverityTypeError SeverityType = "Error"

	SeverityTypeInformation SeverityType = "Information"

	SeverityTypeWarning SeverityType = "Warning"
)

type ComplianceGroupEnum string

const (
	ComplianceGroupEnumCaliforniaProp65 ComplianceGroupEnum = "CaliforniaProp65"
)

type GetProductsWithRegulationsResponse struct {
	XMLName xml.Name `xml:"http://www.promostandards.org/WSDL/ProductComplianceService/1.0.0/ GetProductsWithRegulationsResponse"`

	ProductWithRegulationsArray struct {
		ProductWithRegulations []struct {

			// The identifier of the product that has or will have applicable regulations

			ProductId string `xml:"productId,omitempty" json:"productId,omitempty"`

			// The identifier of the part that has or will have applicable regulations; this element being left off the response indicates all parts have or will have applicable regulations whereas including this element in the response indicates this part has or will have applicable regulations

			PartId string `xml:"partId,omitempty" json:"partId,omitempty"`

			ComplianceGroups struct {
				ComplianceGroup []*ComplianceGroupEnum `xml:"complianceGroup,omitempty" json:"complianceGroup,omitempty"`
			} `xml:"complianceGroups,omitempty" json:"complianceGroups,omitempty"`
		} `xml:"ProductWithRegulations,omitempty" json:"ProductWithRegulations,omitempty"`
	} `xml:"productWithRegulationsArray,omitempty" json:"productWithRegulationsArray,omitempty"`

	ServiceMessageArray struct {
		ServiceMessage []struct {

			// Response for any error requiring notification to requestor
			Code int32 `xml:"code,omitempty" json:"code,omitempty"`

			// Response for any error requiring notification to requestor

			Description string `xml:"description,omitempty" json:"description,omitempty"`

			// The severity of the error. Values are enumerated: {Error, Information, Warning}

			Severity *SeverityType `xml:"severity,omitempty" json:"severity,omitempty"`
		} `xml:"ServiceMessage,omitempty" json:"ServiceMessage,omitempty"`
	} `xml:"ServiceMessageArray,omitempty" json:"ServiceMessageArray,omitempty"`
}

type GetComplianceRequest struct {
	XMLName xml.Name `xml:"http://www.promostandards.org/WSDL/ProductComplianceService/1.0.0/ GetComplianceRequest"`

	//
	// The Standard Version of the Web Service being referenced
	//

	WsVersion string `xml:"wsVersion,omitempty" json:"wsVersion,omitempty"`

	//
	// The customer Id or any other agreed upon Id.

	Id string `xml:"id,omitempty" json:"id,omitempty"`

	// The password associated with the Id
	//

	Password string `xml:"password,omitempty" json:"password,omitempty"`

	// The identifier of the product to get compliance data for

	ProductId string `xml:"productId,omitempty" json:"productId,omitempty"`

	// The identifier of the part to get compliance data for; this element being left off indicates an intention to get compliance data on any applicable parts for the specific product whereas including this element indicates an intention to only get compliance data for the specific part

	PartId string `xml:"partId,omitempty" json:"partId,omitempty"`
}

type ApplicableWarningEnum string

const (
	ApplicableWarningEnumOnProductCancer ApplicableWarningEnum = "On Product Cancer"

	ApplicableWarningEnumOnProductReproductive ApplicableWarningEnum = "On Product Reproductive"

	ApplicableWarningEnumFood ApplicableWarningEnum = "Food"

	ApplicableWarningEnumFurniture ApplicableWarningEnum = "Furniture"

	ApplicableWarningEnumAlcoholicBeverage ApplicableWarningEnum = "Alcoholic Beverage"
)

type WarningLabelAppliedEnum string

const (
	WarningLabelAppliedEnumShortForm WarningLabelAppliedEnum = "Short Form"

	WarningLabelAppliedEnumLongForm WarningLabelAppliedEnum = "Long Form"
)

type PolicyForApplyingLabelEnum string

const (
	PolicyForApplyingLabelEnumAppliedUponRequest PolicyForApplyingLabelEnum = "Applied Upon Request"

	PolicyForApplyingLabelEnumAppliedWhenShippingtoCalifornia PolicyForApplyingLabelEnum = "Applied When Shipping to California"

	PolicyForApplyingLabelEnumAppliedAlways PolicyForApplyingLabelEnum = "Applied Always"
)

type GetComplianceResponse struct {
	XMLName xml.Name `xml:"http://www.promostandards.org/WSDL/ProductComplianceService/1.0.0/ GetComplianceResponse"`

	ComplianceDataArray struct {
		ComplianceData []struct {
			ProductId string `xml:"productId,omitempty" json:"productId,omitempty"`

			PartId string `xml:"partId,omitempty" json:"partId,omitempty"`

			CAProp65 struct {
				ApplicableWarningsArray struct {
					ApplicableWarnings []*CAProp65ApplicableWarning `xml:"ApplicableWarnings,omitempty" json:"ApplicableWarnings,omitempty"`
				} `xml:"ApplicableWarningsArray,omitempty" json:"ApplicableWarningsArray,omitempty"`

				PolicyForApplyingLabel *PolicyForApplyingLabelEnum `xml:"policyForApplyingLabel,omitempty" json:"policyForApplyingLabel,omitempty"`
			} `xml:"CAProp65,omitempty" json:"CAProp65,omitempty"`
		} `xml:"ComplianceData,omitempty" json:"ComplianceData,omitempty"`
	} `xml:"ComplianceDataArray,omitempty" json:"ComplianceDataArray,omitempty"`

	ServiceMessageArray struct {
		ServiceMessage []struct {

			// Response for any error requiring notification to requestor
			Code int32 `xml:"code,omitempty" json:"code,omitempty"`

			// Response for any error requiring notification to requestor

			Description string `xml:"description,omitempty" json:"description,omitempty"`

			// The severity of the error. Values are enumerated: {Error, Information, Warning}

			Severity *SeverityType `xml:"severity,omitempty" json:"severity,omitempty"`
		} `xml:"ServiceMessage,omitempty" json:"ServiceMessage,omitempty"`
	} `xml:"ServiceMessageArray,omitempty" json:"ServiceMessageArray,omitempty"`
}

type CAProp65ApplicableWarning struct {
	ApplicableWarning *ApplicableWarningEnum `xml:"applicableWarning,omitempty" json:"applicableWarning,omitempty"`

	ApplicableChemicals struct {
		ApplicableChemical string `xml:"applicableChemical,omitempty" json:"applicableChemical,omitempty"`
	} `xml:"applicableChemicals,omitempty" json:"applicableChemicals,omitempty"`

	WarningLabelApplied *WarningLabelAppliedEnum `xml:"warningLabelApplied,omitempty" json:"warningLabelApplied,omitempty"`
}

type ProductComplianceService interface {
	GetProductsWithRegulations(request *GetProductsWithRegulationsRequest) (*GetProductsWithRegulationsResponse, error)

	GetProductsWithRegulationsContext(ctx context.Context, request *GetProductsWithRegulationsRequest) (*GetProductsWithRegulationsResponse, error)

	GetCompliance(request *GetComplianceRequest) (*GetComplianceResponse, error)

	GetComplianceContext(ctx context.Context, request *GetComplianceRequest) (*GetComplianceResponse, error)
}

type productComplianceService struct {
	client *soap.Client
}

func NewProductComplianceService(client *soap.Client) ProductComplianceService {
	return &productComplianceService{
		client: client,
	}
}

func (service *productComplianceService) GetProductsWithRegulationsContext(ctx context.Context, request *GetProductsWithRegulationsRequest) (*GetProductsWithRegulationsResponse, error) {
	response := new(GetProductsWithRegulationsResponse)
	err := service.client.CallContext(ctx, "getProductsWithRegulations", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *productComplianceService) GetProductsWithRegulations(request *GetProductsWithRegulationsRequest) (*GetProductsWithRegulationsResponse, error) {
	return service.GetProductsWithRegulationsContext(
		context.Background(),
		request,
	)
}

func (service *productComplianceService) GetComplianceContext(ctx context.Context, request *GetComplianceRequest) (*GetComplianceResponse, error) {
	response := new(GetComplianceResponse)
	err := service.client.CallContext(ctx, "getCompliance", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *productComplianceService) GetCompliance(request *GetComplianceRequest) (*GetComplianceResponse, error) {
	return service.GetComplianceContext(
		context.Background(),
		request,
	)
}
