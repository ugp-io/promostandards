// Code generated by gowsdl DO NOT EDIT.

package myservice

import (
	"context"
	// "fmt"
	"encoding/xml"
	"github.com/hooklift/gowsdl/soap"
	"github.com/araddon/dateparse"
	"time"
)

type CustomTime struct {
    time.Time
}

func (c *CustomTime) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
    var v string
	d.DecodeElement(&v, &start)
	if v != "" {
		parse, err := dateparse.ParseAny(v)
		if err != nil {
			return err
		}
		*c = CustomTime{parse}
	}
    
    return nil
}

func (c *CustomTime) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	const shortForm = "2006-01-02T15:04:05"
	s := c.Format(shortForm)
	return e.EncodeElement(s, start)
}

// against "unused imports"
var _ time.Time
var _ xml.Name

type AnyType struct {
	InnerXML string `xml:",innerxml"`
}

type AnyURI string

type NCName string

//
// Two-letter (alpha-2) ISO 3166-1 code for one of the 243 countries.
//

type ISO3166CountyCode string

const (
	ISO3166CountyCodeAF ISO3166CountyCode = "AF"

	ISO3166CountyCodeAX ISO3166CountyCode = "AX"

	ISO3166CountyCodeAL ISO3166CountyCode = "AL"

	ISO3166CountyCodeDZ ISO3166CountyCode = "DZ"

	ISO3166CountyCodeAS ISO3166CountyCode = "AS"

	ISO3166CountyCodeAD ISO3166CountyCode = "AD"

	ISO3166CountyCodeAO ISO3166CountyCode = "AO"

	ISO3166CountyCodeAI ISO3166CountyCode = "AI"

	ISO3166CountyCodeAQ ISO3166CountyCode = "AQ"

	ISO3166CountyCodeAG ISO3166CountyCode = "AG"

	ISO3166CountyCodeAR ISO3166CountyCode = "AR"

	ISO3166CountyCodeAM ISO3166CountyCode = "AM"

	ISO3166CountyCodeAW ISO3166CountyCode = "AW"

	ISO3166CountyCodeAU ISO3166CountyCode = "AU"

	ISO3166CountyCodeAT ISO3166CountyCode = "AT"

	ISO3166CountyCodeAZ ISO3166CountyCode = "AZ"

	ISO3166CountyCodeBS ISO3166CountyCode = "BS"

	ISO3166CountyCodeBH ISO3166CountyCode = "BH"

	ISO3166CountyCodeBD ISO3166CountyCode = "BD"

	ISO3166CountyCodeBB ISO3166CountyCode = "BB"

	ISO3166CountyCodeBY ISO3166CountyCode = "BY"

	ISO3166CountyCodeBE ISO3166CountyCode = "BE"

	ISO3166CountyCodeBZ ISO3166CountyCode = "BZ"

	ISO3166CountyCodeBJ ISO3166CountyCode = "BJ"

	ISO3166CountyCodeBM ISO3166CountyCode = "BM"

	ISO3166CountyCodeBT ISO3166CountyCode = "BT"

	ISO3166CountyCodeBO ISO3166CountyCode = "BO"

	ISO3166CountyCodeBA ISO3166CountyCode = "BA"

	ISO3166CountyCodeBW ISO3166CountyCode = "BW"

	ISO3166CountyCodeBV ISO3166CountyCode = "BV"

	ISO3166CountyCodeBR ISO3166CountyCode = "BR"

	ISO3166CountyCodeIO ISO3166CountyCode = "IO"

	ISO3166CountyCodeBN ISO3166CountyCode = "BN"

	ISO3166CountyCodeBG ISO3166CountyCode = "BG"

	ISO3166CountyCodeBF ISO3166CountyCode = "BF"

	ISO3166CountyCodeBI ISO3166CountyCode = "BI"

	ISO3166CountyCodeKH ISO3166CountyCode = "KH"

	ISO3166CountyCodeCM ISO3166CountyCode = "CM"

	ISO3166CountyCodeCA ISO3166CountyCode = "CA"

	ISO3166CountyCodeCV ISO3166CountyCode = "CV"

	ISO3166CountyCodeKY ISO3166CountyCode = "KY"

	ISO3166CountyCodeCF ISO3166CountyCode = "CF"

	ISO3166CountyCodeTD ISO3166CountyCode = "TD"

	ISO3166CountyCodeCL ISO3166CountyCode = "CL"

	ISO3166CountyCodeCN ISO3166CountyCode = "CN"

	ISO3166CountyCodeCX ISO3166CountyCode = "CX"

	ISO3166CountyCodeCC ISO3166CountyCode = "CC"

	ISO3166CountyCodeCO ISO3166CountyCode = "CO"

	ISO3166CountyCodeKM ISO3166CountyCode = "KM"

	ISO3166CountyCodeCG ISO3166CountyCode = "CG"

	ISO3166CountyCodeCD ISO3166CountyCode = "CD"

	ISO3166CountyCodeCK ISO3166CountyCode = "CK"

	ISO3166CountyCodeCR ISO3166CountyCode = "CR"

	ISO3166CountyCodeCI ISO3166CountyCode = "CI"

	ISO3166CountyCodeHR ISO3166CountyCode = "HR"

	ISO3166CountyCodeCU ISO3166CountyCode = "CU"

	ISO3166CountyCodeCY ISO3166CountyCode = "CY"

	ISO3166CountyCodeCZ ISO3166CountyCode = "CZ"

	ISO3166CountyCodeDK ISO3166CountyCode = "DK"

	ISO3166CountyCodeDJ ISO3166CountyCode = "DJ"

	ISO3166CountyCodeDM ISO3166CountyCode = "DM"

	ISO3166CountyCodeDO ISO3166CountyCode = "DO"

	ISO3166CountyCodeEC ISO3166CountyCode = "EC"

	ISO3166CountyCodeEG ISO3166CountyCode = "EG"

	ISO3166CountyCodeSV ISO3166CountyCode = "SV"

	ISO3166CountyCodeGQ ISO3166CountyCode = "GQ"

	ISO3166CountyCodeER ISO3166CountyCode = "ER"

	ISO3166CountyCodeEE ISO3166CountyCode = "EE"

	ISO3166CountyCodeET ISO3166CountyCode = "ET"

	ISO3166CountyCodeFK ISO3166CountyCode = "FK"

	ISO3166CountyCodeFO ISO3166CountyCode = "FO"

	ISO3166CountyCodeFJ ISO3166CountyCode = "FJ"

	ISO3166CountyCodeFI ISO3166CountyCode = "FI"

	ISO3166CountyCodeFR ISO3166CountyCode = "FR"

	ISO3166CountyCodeGF ISO3166CountyCode = "GF"

	ISO3166CountyCodePF ISO3166CountyCode = "PF"

	ISO3166CountyCodeTF ISO3166CountyCode = "TF"

	ISO3166CountyCodeGA ISO3166CountyCode = "GA"

	ISO3166CountyCodeGM ISO3166CountyCode = "GM"

	ISO3166CountyCodeGE ISO3166CountyCode = "GE"

	ISO3166CountyCodeDE ISO3166CountyCode = "DE"

	ISO3166CountyCodeGH ISO3166CountyCode = "GH"

	ISO3166CountyCodeGI ISO3166CountyCode = "GI"

	ISO3166CountyCodeGR ISO3166CountyCode = "GR"

	ISO3166CountyCodeGL ISO3166CountyCode = "GL"

	ISO3166CountyCodeGD ISO3166CountyCode = "GD"

	ISO3166CountyCodeGP ISO3166CountyCode = "GP"

	ISO3166CountyCodeGU ISO3166CountyCode = "GU"

	ISO3166CountyCodeGT ISO3166CountyCode = "GT"

	ISO3166CountyCodeGG ISO3166CountyCode = "GG"

	ISO3166CountyCodeGN ISO3166CountyCode = "GN"

	ISO3166CountyCodeGW ISO3166CountyCode = "GW"

	ISO3166CountyCodeGY ISO3166CountyCode = "GY"

	ISO3166CountyCodeHT ISO3166CountyCode = "HT"

	ISO3166CountyCodeHM ISO3166CountyCode = "HM"

	ISO3166CountyCodeVA ISO3166CountyCode = "VA"

	ISO3166CountyCodeHN ISO3166CountyCode = "HN"

	ISO3166CountyCodeHK ISO3166CountyCode = "HK"

	ISO3166CountyCodeHU ISO3166CountyCode = "HU"

	ISO3166CountyCodeIS ISO3166CountyCode = "IS"

	ISO3166CountyCodeIN ISO3166CountyCode = "IN"

	ISO3166CountyCodeID ISO3166CountyCode = "ID"

	ISO3166CountyCodeIR ISO3166CountyCode = "IR"

	ISO3166CountyCodeIQ ISO3166CountyCode = "IQ"

	ISO3166CountyCodeIE ISO3166CountyCode = "IE"

	ISO3166CountyCodeIM ISO3166CountyCode = "IM"

	ISO3166CountyCodeIL ISO3166CountyCode = "IL"

	ISO3166CountyCodeIT ISO3166CountyCode = "IT"

	ISO3166CountyCodeJM ISO3166CountyCode = "JM"

	ISO3166CountyCodeJP ISO3166CountyCode = "JP"

	ISO3166CountyCodeJE ISO3166CountyCode = "JE"

	ISO3166CountyCodeJO ISO3166CountyCode = "JO"

	ISO3166CountyCodeKZ ISO3166CountyCode = "KZ"

	ISO3166CountyCodeKE ISO3166CountyCode = "KE"

	ISO3166CountyCodeKI ISO3166CountyCode = "KI"

	ISO3166CountyCodeKP ISO3166CountyCode = "KP"

	ISO3166CountyCodeKR ISO3166CountyCode = "KR"

	ISO3166CountyCodeKW ISO3166CountyCode = "KW"

	ISO3166CountyCodeKG ISO3166CountyCode = "KG"

	ISO3166CountyCodeLA ISO3166CountyCode = "LA"

	ISO3166CountyCodeLV ISO3166CountyCode = "LV"

	ISO3166CountyCodeLB ISO3166CountyCode = "LB"

	ISO3166CountyCodeLS ISO3166CountyCode = "LS"

	ISO3166CountyCodeLR ISO3166CountyCode = "LR"

	ISO3166CountyCodeLY ISO3166CountyCode = "LY"

	ISO3166CountyCodeLI ISO3166CountyCode = "LI"

	ISO3166CountyCodeLT ISO3166CountyCode = "LT"

	ISO3166CountyCodeLU ISO3166CountyCode = "LU"

	ISO3166CountyCodeMO ISO3166CountyCode = "MO"

	ISO3166CountyCodeMK ISO3166CountyCode = "MK"

	ISO3166CountyCodeMG ISO3166CountyCode = "MG"

	ISO3166CountyCodeMW ISO3166CountyCode = "MW"

	ISO3166CountyCodeMY ISO3166CountyCode = "MY"

	ISO3166CountyCodeMV ISO3166CountyCode = "MV"

	ISO3166CountyCodeML ISO3166CountyCode = "ML"

	ISO3166CountyCodeMT ISO3166CountyCode = "MT"

	ISO3166CountyCodeMH ISO3166CountyCode = "MH"

	ISO3166CountyCodeMQ ISO3166CountyCode = "MQ"

	ISO3166CountyCodeMR ISO3166CountyCode = "MR"

	ISO3166CountyCodeMU ISO3166CountyCode = "MU"

	ISO3166CountyCodeYT ISO3166CountyCode = "YT"

	ISO3166CountyCodeMX ISO3166CountyCode = "MX"

	ISO3166CountyCodeFM ISO3166CountyCode = "FM"

	ISO3166CountyCodeMD ISO3166CountyCode = "MD"

	ISO3166CountyCodeMC ISO3166CountyCode = "MC"

	ISO3166CountyCodeMN ISO3166CountyCode = "MN"

	ISO3166CountyCodeMS ISO3166CountyCode = "MS"

	ISO3166CountyCodeMA ISO3166CountyCode = "MA"

	ISO3166CountyCodeMZ ISO3166CountyCode = "MZ"

	ISO3166CountyCodeMM ISO3166CountyCode = "MM"

	ISO3166CountyCodeNA ISO3166CountyCode = "NA"

	ISO3166CountyCodeNR ISO3166CountyCode = "NR"

	ISO3166CountyCodeNP ISO3166CountyCode = "NP"

	ISO3166CountyCodeNL ISO3166CountyCode = "NL"

	ISO3166CountyCodeAN ISO3166CountyCode = "AN"

	ISO3166CountyCodeNC ISO3166CountyCode = "NC"

	ISO3166CountyCodeNZ ISO3166CountyCode = "NZ"

	ISO3166CountyCodeNI ISO3166CountyCode = "NI"

	ISO3166CountyCodeNE ISO3166CountyCode = "NE"

	ISO3166CountyCodeNG ISO3166CountyCode = "NG"

	ISO3166CountyCodeNU ISO3166CountyCode = "NU"

	ISO3166CountyCodeNF ISO3166CountyCode = "NF"

	ISO3166CountyCodeMP ISO3166CountyCode = "MP"

	ISO3166CountyCodeNO ISO3166CountyCode = "NO"

	ISO3166CountyCodeOM ISO3166CountyCode = "OM"

	ISO3166CountyCodePK ISO3166CountyCode = "PK"

	ISO3166CountyCodePW ISO3166CountyCode = "PW"

	ISO3166CountyCodePS ISO3166CountyCode = "PS"

	ISO3166CountyCodePA ISO3166CountyCode = "PA"

	ISO3166CountyCodePG ISO3166CountyCode = "PG"

	ISO3166CountyCodePY ISO3166CountyCode = "PY"

	ISO3166CountyCodePE ISO3166CountyCode = "PE"

	ISO3166CountyCodePH ISO3166CountyCode = "PH"

	ISO3166CountyCodePN ISO3166CountyCode = "PN"

	ISO3166CountyCodePL ISO3166CountyCode = "PL"

	ISO3166CountyCodePT ISO3166CountyCode = "PT"

	ISO3166CountyCodePR ISO3166CountyCode = "PR"

	ISO3166CountyCodeQA ISO3166CountyCode = "QA"

	ISO3166CountyCodeRE ISO3166CountyCode = "RE"

	ISO3166CountyCodeRO ISO3166CountyCode = "RO"

	ISO3166CountyCodeRU ISO3166CountyCode = "RU"

	ISO3166CountyCodeRW ISO3166CountyCode = "RW"

	ISO3166CountyCodeSH ISO3166CountyCode = "SH"

	ISO3166CountyCodeKN ISO3166CountyCode = "KN"

	ISO3166CountyCodeLC ISO3166CountyCode = "LC"

	ISO3166CountyCodePM ISO3166CountyCode = "PM"

	ISO3166CountyCodeVC ISO3166CountyCode = "VC"

	ISO3166CountyCodeWS ISO3166CountyCode = "WS"

	ISO3166CountyCodeSM ISO3166CountyCode = "SM"

	ISO3166CountyCodeST ISO3166CountyCode = "ST"

	ISO3166CountyCodeSA ISO3166CountyCode = "SA"

	ISO3166CountyCodeSN ISO3166CountyCode = "SN"

	ISO3166CountyCodeCS ISO3166CountyCode = "CS"

	ISO3166CountyCodeSC ISO3166CountyCode = "SC"

	ISO3166CountyCodeSL ISO3166CountyCode = "SL"

	ISO3166CountyCodeSG ISO3166CountyCode = "SG"

	ISO3166CountyCodeSK ISO3166CountyCode = "SK"

	ISO3166CountyCodeSI ISO3166CountyCode = "SI"

	ISO3166CountyCodeSB ISO3166CountyCode = "SB"

	ISO3166CountyCodeSO ISO3166CountyCode = "SO"

	ISO3166CountyCodeZA ISO3166CountyCode = "ZA"

	ISO3166CountyCodeGS ISO3166CountyCode = "GS"

	ISO3166CountyCodeES ISO3166CountyCode = "ES"

	ISO3166CountyCodeLK ISO3166CountyCode = "LK"

	ISO3166CountyCodeSD ISO3166CountyCode = "SD"

	ISO3166CountyCodeSR ISO3166CountyCode = "SR"

	ISO3166CountyCodeSJ ISO3166CountyCode = "SJ"

	ISO3166CountyCodeSZ ISO3166CountyCode = "SZ"

	ISO3166CountyCodeSE ISO3166CountyCode = "SE"

	ISO3166CountyCodeCH ISO3166CountyCode = "CH"

	ISO3166CountyCodeSY ISO3166CountyCode = "SY"

	ISO3166CountyCodeTW ISO3166CountyCode = "TW"

	ISO3166CountyCodeTJ ISO3166CountyCode = "TJ"

	ISO3166CountyCodeTZ ISO3166CountyCode = "TZ"

	ISO3166CountyCodeTH ISO3166CountyCode = "TH"

	ISO3166CountyCodeTL ISO3166CountyCode = "TL"

	ISO3166CountyCodeTG ISO3166CountyCode = "TG"

	ISO3166CountyCodeTK ISO3166CountyCode = "TK"

	ISO3166CountyCodeTO ISO3166CountyCode = "TO"

	ISO3166CountyCodeTT ISO3166CountyCode = "TT"

	ISO3166CountyCodeTN ISO3166CountyCode = "TN"

	ISO3166CountyCodeTR ISO3166CountyCode = "TR"

	ISO3166CountyCodeTM ISO3166CountyCode = "TM"

	ISO3166CountyCodeTC ISO3166CountyCode = "TC"

	ISO3166CountyCodeTV ISO3166CountyCode = "TV"

	ISO3166CountyCodeUG ISO3166CountyCode = "UG"

	ISO3166CountyCodeUA ISO3166CountyCode = "UA"

	ISO3166CountyCodeAE ISO3166CountyCode = "AE"

	ISO3166CountyCodeGB ISO3166CountyCode = "GB"

	ISO3166CountyCodeUS ISO3166CountyCode = "US"

	ISO3166CountyCodeUM ISO3166CountyCode = "UM"

	ISO3166CountyCodeUY ISO3166CountyCode = "UY"

	ISO3166CountyCodeUZ ISO3166CountyCode = "UZ"

	ISO3166CountyCodeVU ISO3166CountyCode = "VU"

	ISO3166CountyCodeVE ISO3166CountyCode = "VE"

	ISO3166CountyCodeVN ISO3166CountyCode = "VN"

	ISO3166CountyCodeVG ISO3166CountyCode = "VG"

	ISO3166CountyCodeVI ISO3166CountyCode = "VI"

	ISO3166CountyCodeWF ISO3166CountyCode = "WF"

	ISO3166CountyCodeEH ISO3166CountyCode = "EH"

	ISO3166CountyCodeYE ISO3166CountyCode = "YE"

	ISO3166CountyCodeZM ISO3166CountyCode = "ZM"

	ISO3166CountyCodeZW ISO3166CountyCode = "ZW"
)

//
// https://www.iso20022.org/standardsrepository/public/wqt/Description/mx/dico/codesets/_Y4XF0tp-Ed-ak6NoX_4Aeg_385163498
// The type of Dimension UOM
//

type ISO20022UomCode string

const (
	ISO20022UomCodePIEC ISO20022UomCode = "PIEC"

	ISO20022UomCodeTONS ISO20022UomCode = "TONS"

	ISO20022UomCodeFOOT ISO20022UomCode = "FOOT"

	ISO20022UomCodeGBGA ISO20022UomCode = "GBGA"

	ISO20022UomCodeUSGA ISO20022UomCode = "USGA"

	ISO20022UomCodeGRAM ISO20022UomCode = "GRAM"

	ISO20022UomCodeINCH ISO20022UomCode = "INCH"

	ISO20022UomCodeKILO ISO20022UomCode = "KILO"

	ISO20022UomCodePUND ISO20022UomCode = "PUND"

	ISO20022UomCodeMETR ISO20022UomCode = "METR"

	ISO20022UomCodeCMET ISO20022UomCode = "CMET"

	ISO20022UomCodeMMET ISO20022UomCode = "MMET"

	ISO20022UomCodeLITR ISO20022UomCode = "LITR"

	ISO20022UomCodeCELI ISO20022UomCode = "CELI"

	ISO20022UomCodeMILI ISO20022UomCode = "MILI"

	ISO20022UomCodeGBOU ISO20022UomCode = "GBOU"

	ISO20022UomCodeUSOU ISO20022UomCode = "USOU"

	ISO20022UomCodeGBQA ISO20022UomCode = "GBQA"

	ISO20022UomCodeUSQA ISO20022UomCode = "USQA"

	ISO20022UomCodeGBPI ISO20022UomCode = "GBPI"

	ISO20022UomCodeUSPI ISO20022UomCode = "USPI"

	ISO20022UomCodeMILE ISO20022UomCode = "MILE"

	ISO20022UomCodeKMET ISO20022UomCode = "KMET"

	ISO20022UomCodeYARD ISO20022UomCode = "YARD"

	ISO20022UomCodeSQKI ISO20022UomCode = "SQKI"

	ISO20022UomCodeHECT ISO20022UomCode = "HECT"

	ISO20022UomCodeARES ISO20022UomCode = "ARES"

	ISO20022UomCodeSMET ISO20022UomCode = "SMET"

	ISO20022UomCodeSCMT ISO20022UomCode = "SCMT"

	ISO20022UomCodeSMIL ISO20022UomCode = "SMIL"

	ISO20022UomCodeSQMI ISO20022UomCode = "SQMI"

	ISO20022UomCodeSQYA ISO20022UomCode = "SQYA"

	ISO20022UomCodeSQFO ISO20022UomCode = "SQFO"

	ISO20022UomCodeSQIN ISO20022UomCode = "SQIN"

	ISO20022UomCodeACRE ISO20022UomCode = "ACRE"
)

type CurrencyNameType string

const (
	CurrencyNameTypeAfghanistanAfghani CurrencyNameType = "Afghanistan Afghani"

	CurrencyNameTypeAlbaniaLek CurrencyNameType = "Albania Lek"

	CurrencyNameTypeAlgerianDinar CurrencyNameType = "Algerian Dinar"

	CurrencyNameTypeAngolaNewKwanza CurrencyNameType = "Angola New Kwanza"

	CurrencyNameTypeArgentinePeso CurrencyNameType = "Argentine Peso"

	CurrencyNameTypeArmenianDram CurrencyNameType = "Armenian Dram"

	CurrencyNameTypeArubanGuilder CurrencyNameType = "Aruban Guilder"

	CurrencyNameTypeAustralianDollar CurrencyNameType = "Australian Dollar"

	CurrencyNameTypeAustrianSchilling CurrencyNameType = "Austrian Schilling"

	CurrencyNameTypeAzerbaijanianManat CurrencyNameType = "Azerbaijanian Manat"

	CurrencyNameTypeBahamianDollar CurrencyNameType = "Bahamian Dollar"

	CurrencyNameTypeBahrainiDinar CurrencyNameType = "Bahraini Dinar"

	CurrencyNameTypeBangladeshTaka CurrencyNameType = "BangladeshTaka"

	CurrencyNameTypeBarbadosDollar CurrencyNameType = "Barbados Dollar"

	CurrencyNameTypeBelarussianRuble CurrencyNameType = "Belarussian Ruble"

	CurrencyNameTypeBelgianFranc CurrencyNameType = "Belgian Franc"

	CurrencyNameTypeBelizeDollar CurrencyNameType = "Belize Dollar"

	CurrencyNameTypeBermudianDollar CurrencyNameType = "Bermudian Dollar"

	CurrencyNameTypeBhutanNgultrum CurrencyNameType = "Bhutan Ngultrum"

	CurrencyNameTypeBoliviaBoliviano CurrencyNameType = "Bolivia Boliviano"

	CurrencyNameTypeBosniaConvertibleMark CurrencyNameType = "Bosnia Convertible Mark"

	CurrencyNameTypeBotswanaPula CurrencyNameType = "Botswana Pula"

	CurrencyNameTypeBrazilianReal CurrencyNameType = "Brazilian Real"

	CurrencyNameTypeBruneiDollar CurrencyNameType = "Brunei Dollar"

	CurrencyNameTypeBulgariaLev CurrencyNameType = "Bulgaria Lev"

	CurrencyNameTypeBurundiFranc CurrencyNameType = "Burundi Franc"

	CurrencyNameTypeCambodiaRiel CurrencyNameType = "Cambodia Riel"

	CurrencyNameTypeCanadianDollar CurrencyNameType = "Canadian Dollar"

	CurrencyNameTypeCapeVerdeEscudo CurrencyNameType = "Cape Verde Escudo"

	CurrencyNameTypeCaymanIslandsDollar CurrencyNameType = "Cayman Islands Dollar"

	CurrencyNameTypeCFAFrancBCEAO CurrencyNameType = "CFA Franc BCEAO"

	CurrencyNameTypeCFAFrancBEAC CurrencyNameType = "CFA Franc BEAC"

	CurrencyNameTypeCFPFranc CurrencyNameType = "CFP Franc"

	CurrencyNameTypeChileanPeso CurrencyNameType = "Chilean Peso"

	CurrencyNameTypeChineseYuanRenminbi CurrencyNameType = "Chinese Yuan Renminbi"

	CurrencyNameTypeColumbianPeso CurrencyNameType = "Columbian Peso"

	CurrencyNameTypeComoroFranc CurrencyNameType = "Comoro Franc"

	CurrencyNameTypeCongoFranc CurrencyNameType = "Congo Franc"

	CurrencyNameTypeCostaRicanColon CurrencyNameType = "Costa Rican Colon"

	CurrencyNameTypeCroatianKuna CurrencyNameType = "Croatian Kuna"

	CurrencyNameTypeCubanPeso CurrencyNameType = "Cuban Peso"

	CurrencyNameTypeCyprusPound CurrencyNameType = "Cyprus Pound"

	CurrencyNameTypeCzechKoruna CurrencyNameType = "Czech Koruna"

	CurrencyNameTypeDanishKrone CurrencyNameType = "Danish Krone"

	CurrencyNameTypeDeutscheMark CurrencyNameType = "Deutsche Mark"

	CurrencyNameTypeDijiboutiFranc CurrencyNameType = "Dijibouti Franc"

	CurrencyNameTypeDominicanPeso CurrencyNameType = "Dominican Peso"

	CurrencyNameTypeDutchGuilder CurrencyNameType = "Dutch Guilder"

	CurrencyNameTypeEastCaribbeanDollar CurrencyNameType = "East Caribbean Dollar"

	CurrencyNameTypeEcuadorSucre CurrencyNameType = "Ecuador Sucre"

	CurrencyNameTypeEgyptianPound CurrencyNameType = "Egyptian  Pound"

	CurrencyNameTypeElSalvadorianColon CurrencyNameType = "El Salvadorian Colon"

	CurrencyNameTypeEritreaNakfa CurrencyNameType = "Eritrea Nakfa"

	CurrencyNameTypeEscudoCaboverdiano CurrencyNameType = "Escudo Caboverdiano"

	CurrencyNameTypeEstoniaKroon CurrencyNameType = "Estonia Kroon"

	CurrencyNameTypeEthiopiaBirr CurrencyNameType = "Ethiopia Birr"

	CurrencyNameTypeEuro CurrencyNameType = "Euro"

	CurrencyNameTypeFalklandPound CurrencyNameType = "Falkland Pound"

	CurrencyNameTypeFijiDollar CurrencyNameType = "Fiji Dollar"

	CurrencyNameTypeFinnishMarkka CurrencyNameType = "Finnish Markka"

	CurrencyNameTypeFrenchFranc CurrencyNameType = "French Franc"

	CurrencyNameTypeGambiaDalasi CurrencyNameType = "Gambia Dalasi"

	CurrencyNameTypeGeorgiaLari CurrencyNameType = "Georgia Lari"

	CurrencyNameTypeGhanaCedi CurrencyNameType = "Ghana Cedi"

	CurrencyNameTypeGibraltarPound CurrencyNameType = "Gibraltar Pound"

	CurrencyNameTypeGreekDrachma CurrencyNameType = "Greek Drachma"

	CurrencyNameTypeGuatemalaQuetzal CurrencyNameType = "Guatemala Quetzal"

	CurrencyNameTypeGuyanaDollar CurrencyNameType = "Guyana Dollar"

	CurrencyNameTypeHaitiGourde CurrencyNameType = "Haiti Gourde"

	CurrencyNameTypeHondurasLempira CurrencyNameType = "Honduras Lempira"

	CurrencyNameTypeHongKongDollar CurrencyNameType = "Hong Kong Dollar"

	CurrencyNameTypeHungaryForint CurrencyNameType = "Hungary Forint"

	CurrencyNameTypeIcelandicKrona CurrencyNameType = "Icelandic Krona"

	CurrencyNameTypeIndianRupee CurrencyNameType = "Indian Rupee"

	CurrencyNameTypeIndonesiaRupiah CurrencyNameType = "Indonesia Rupiah"

	CurrencyNameTypeIranianRiyal CurrencyNameType = "Iranian Riyal"

	CurrencyNameTypeIraqiDinar CurrencyNameType = "Iraqi Dinar"

	CurrencyNameTypeIrishPunt CurrencyNameType = "Irish Punt"

	CurrencyNameTypeIsraelShekel CurrencyNameType = "Israel Shekel"

	CurrencyNameTypeItalianLira CurrencyNameType = "Italian Lira"

	CurrencyNameTypeJamaicanDollar CurrencyNameType = "Jamaican Dollar"

	CurrencyNameTypeJapaneseYen CurrencyNameType = "Japanese Yen"

	CurrencyNameTypeJordanianDinar CurrencyNameType = "Jordanian Dinar"

	CurrencyNameTypeKazakhstanTenge CurrencyNameType = "Kazakhstan Tenge"

	CurrencyNameTypeKenyanShilling CurrencyNameType = "Kenyan Shilling"

	CurrencyNameTypeKuwaitiDinar CurrencyNameType = "Kuwaiti Dinar"

	CurrencyNameTypeKyrgyzstanSom CurrencyNameType = "Kyrgyzstan Som"

	CurrencyNameTypeLaosKip CurrencyNameType = "Laos Kip"

	CurrencyNameTypeLatviaLat CurrencyNameType = "Latvia Lat"

	CurrencyNameTypeLebanesePound CurrencyNameType = "Lebanese Pound"

	CurrencyNameTypeLesothoMaloti CurrencyNameType = "Lesotho Maloti"

	CurrencyNameTypeLiberianDollar CurrencyNameType = "Liberian Dollar"

	CurrencyNameTypeLibyanDinar CurrencyNameType = "Libyan Dinar"

	CurrencyNameTypeLithuaniaLitas CurrencyNameType = "Lithuania Litas"

	CurrencyNameTypeLuxembourgFranc CurrencyNameType = "Luxembourg Franc"

	CurrencyNameTypeMacaoPataca CurrencyNameType = "Macao Pataca"

	CurrencyNameTypeMacedonianDenar CurrencyNameType = "Macedonian Denar"

	CurrencyNameTypeMalagasyFranc CurrencyNameType = "Malagasy Franc"

	CurrencyNameTypeMalawianKwacha CurrencyNameType = "Malawian Kwacha"

	CurrencyNameTypeMalaysianRinggit CurrencyNameType = "Malaysian Ringgit"

	CurrencyNameTypeMaldivesRufiyaa CurrencyNameType = "Maldives Rufiyaa"

	CurrencyNameTypeMalteseLira CurrencyNameType = "Maltese Lira"

	CurrencyNameTypeMauritaniaOuguiya CurrencyNameType = "Mauritania Ouguiya"

	CurrencyNameTypeMauritiusRupee CurrencyNameType = "Mauritius Rupee"

	CurrencyNameTypeMexicanPeso CurrencyNameType = "Mexican Peso"

	CurrencyNameTypeMoldovianLeu CurrencyNameType = "Moldovian Leu"

	CurrencyNameTypeMongoliaTugrik CurrencyNameType = "Mongolia Tugrik"

	CurrencyNameTypeMoroccanDirham CurrencyNameType = "Moroccan Dirham"

	CurrencyNameTypeMozambiqueMetical CurrencyNameType = "Mozambique Metical"

	CurrencyNameTypeMyanmarKyat CurrencyNameType = "Myanmar Kyat"

	CurrencyNameTypeNamibianDollar CurrencyNameType = "Namibian Dollar"

	CurrencyNameTypeNepaleseRupee CurrencyNameType = "Nepalese Rupee"

	CurrencyNameTypeNetherlandsAntillesGuilder CurrencyNameType = "Netherlands Antilles Guilder"

	CurrencyNameTypeNewZaire CurrencyNameType = "New Zaire"

	CurrencyNameTypeNewZealandDollar CurrencyNameType = "New Zealand Dollar"

	CurrencyNameTypeNicaraguaCordoba CurrencyNameType = "Nicaragua Cordoba"

	CurrencyNameTypeNigeriaNaira CurrencyNameType = "Nigeria Naira"

	CurrencyNameTypeNorthKoreanWon CurrencyNameType = "North Korean Won"

	CurrencyNameTypeNorwegianKrone CurrencyNameType = "Norwegian Krone"

	CurrencyNameTypePakistaniRupee CurrencyNameType = "Pakistani Rupee"

	CurrencyNameTypePanamaBalboa CurrencyNameType = "Panama Balboa"

	CurrencyNameTypePapuaNewGuineaKina CurrencyNameType = "Papua New Guinea Kina"

	CurrencyNameTypeParaguayGuarani CurrencyNameType = "Paraguay Guarani"

	CurrencyNameTypePeruNewSol CurrencyNameType = "Peru New Sol"

	CurrencyNameTypePhilippinePeso CurrencyNameType = "Philippine Peso"

	CurrencyNameTypePolandNewZloty CurrencyNameType = "Poland New Zloty"

	CurrencyNameTypePortugueseEscudo CurrencyNameType = "Portuguese Escudo"

	CurrencyNameTypeQatariRiyal CurrencyNameType = "Qatari Riyal"

	CurrencyNameTypeRiyalOmani CurrencyNameType = "Riyal Omani"

	CurrencyNameTypeRomanianLeu CurrencyNameType = "Romanian Leu"

	CurrencyNameTypeRussianFederationRouble CurrencyNameType = "Russian Federation Rouble"

	CurrencyNameTypeRwandaFranc CurrencyNameType = "Rwanda Franc"

	CurrencyNameTypeSaoTomeandPrincipeDobra CurrencyNameType = "Sao Tome and Principe Dobra"

	CurrencyNameTypeSaudiRiyal CurrencyNameType = "Saudi Riyal"

	CurrencyNameTypeSeychellesRupee CurrencyNameType = "Seychelles Rupee"

	CurrencyNameTypeSierraLeoneLeone CurrencyNameType = "Sierra Leone Leone"

	CurrencyNameTypeSingaporeDollar CurrencyNameType = "Singapore Dollar"

	CurrencyNameTypeSlovakDoruna CurrencyNameType = "Slovak Doruna"

	CurrencyNameTypeSloveniaTolar CurrencyNameType = "Slovenia Tolar"

	CurrencyNameTypeSolomanIslandsDollar CurrencyNameType = "Soloman Islands Dollar"

	CurrencyNameTypeSomaliaShilling CurrencyNameType = "Somalia Shilling"

	CurrencyNameTypeSouthAfricanRand CurrencyNameType = "South African Rand"

	CurrencyNameTypeSouthKoereanWon CurrencyNameType = "South Koerean Won"

	CurrencyNameTypeSpanishPeseta CurrencyNameType = "Spanish Peseta"

	CurrencyNameTypeSriLankanRupee CurrencyNameType = "Sri Lankan Rupee"

	CurrencyNameTypeStHelenaPound CurrencyNameType = "St Helena Pound"

	CurrencyNameTypeSterling CurrencyNameType = "Sterling"

	CurrencyNameTypeSudanesePound CurrencyNameType = "Sudanese Pound"

	CurrencyNameTypeSurinamGuilder CurrencyNameType = "Surinam Guilder"

	CurrencyNameTypeSwazilandLilangeni CurrencyNameType = "Swaziland Lilangeni"

	CurrencyNameTypeSwedishKrona CurrencyNameType = "Swedish Krona"

	CurrencyNameTypeSwissFranc CurrencyNameType = "Swiss Franc"

	CurrencyNameTypeSyrianPound CurrencyNameType = "Syrian Pound"

	CurrencyNameTypeTaiwaneseNTDollar CurrencyNameType = "Taiwanese NT Dollar"

	CurrencyNameTypeTajikistanRuble CurrencyNameType = "Tajikistan Ruble"

	CurrencyNameTypeTanzanianShilling CurrencyNameType = "Tanzanian Shilling"

	CurrencyNameTypeThailandBaht CurrencyNameType = "Thailand Baht"

	CurrencyNameTypeTimorEscudo CurrencyNameType = "Timor Escudo"

	CurrencyNameTypeTongaPalanga CurrencyNameType = "Tonga Palanga"

	CurrencyNameTypeTrinidadandTobagoDollar CurrencyNameType = "Trinidad and Tobago Dollar"

	CurrencyNameTypeTunasiaTunisianDinar CurrencyNameType = "Tunasia Tunisian Dinar"

	CurrencyNameTypeTurkishLira CurrencyNameType = "Turkish Lira"

	CurrencyNameTypeTurkmenistanManat CurrencyNameType = "Turkmenistan Manat"

	CurrencyNameTypeUAEDirham CurrencyNameType = "UAE Dirham"

	CurrencyNameTypeUgandianShilling CurrencyNameType = "Ugandian Shilling"

	CurrencyNameTypeUkraineHryvna CurrencyNameType = "Ukraine Hryvna"

	CurrencyNameTypeUruguayanNewPeso CurrencyNameType = "Uruguayan New Peso"

	CurrencyNameTypeUnitedStatesofAmericaDollar CurrencyNameType = "United States of America Dollar"

	CurrencyNameTypeUzbekistaniSum CurrencyNameType = "Uzbekistani Sum"

	CurrencyNameTypeVanuatuVatu CurrencyNameType = "Vanuatu Vatu"

	CurrencyNameTypeVenezuelaBolivar CurrencyNameType = "Venezuela Bolivar"

	CurrencyNameTypeVietnamDong CurrencyNameType = "Vietnam Dong"

	CurrencyNameTypeWesternSomoaTala CurrencyNameType = "Western Somoa Tala"

	CurrencyNameTypeYemenRiyal CurrencyNameType = "Yemen Riyal"

	CurrencyNameTypeYugoslaviaNewDinar CurrencyNameType = "Yugoslavia New Dinar"

	CurrencyNameTypeZambianKwacha CurrencyNameType = "Zambian Kwacha"

	CurrencyNameTypeZimbabweDollar CurrencyNameType = "Zimbabwe Dollar"
)

type CurrencyCodeType string

const (
	CurrencyCodeTypeAFA CurrencyCodeType = "AFA"

	CurrencyCodeTypeALL CurrencyCodeType = "ALL"

	CurrencyCodeTypeDZD CurrencyCodeType = "DZD"

	CurrencyCodeTypeAON CurrencyCodeType = "AON"

	CurrencyCodeTypeARS CurrencyCodeType = "ARS"

	CurrencyCodeTypeAMD CurrencyCodeType = "AMD"

	CurrencyCodeTypeAWG CurrencyCodeType = "AWG"

	CurrencyCodeTypeAUD CurrencyCodeType = "AUD"

	CurrencyCodeTypeATS CurrencyCodeType = "ATS"

	CurrencyCodeTypeAZM CurrencyCodeType = "AZM"

	CurrencyCodeTypeBSD CurrencyCodeType = "BSD"

	CurrencyCodeTypeBHD CurrencyCodeType = "BHD"

	CurrencyCodeTypeBDT CurrencyCodeType = "BDT"

	CurrencyCodeTypeBBD CurrencyCodeType = "BBD"

	CurrencyCodeTypeBYR CurrencyCodeType = "BYR"

	CurrencyCodeTypeBEF CurrencyCodeType = "BEF"

	CurrencyCodeTypeBZD CurrencyCodeType = "BZD"

	CurrencyCodeTypeBMD CurrencyCodeType = "BMD"

	CurrencyCodeTypeBTN CurrencyCodeType = "BTN"

	CurrencyCodeTypeBOB CurrencyCodeType = "BOB"

	CurrencyCodeTypeBAM CurrencyCodeType = "BAM"

	CurrencyCodeTypeBWP CurrencyCodeType = "BWP"

	CurrencyCodeTypeBRL CurrencyCodeType = "BRL"

	CurrencyCodeTypeBND CurrencyCodeType = "BND"

	CurrencyCodeTypeBGL CurrencyCodeType = "BGL"

	CurrencyCodeTypeBIF CurrencyCodeType = "BIF"

	CurrencyCodeTypeKHR CurrencyCodeType = "KHR"

	CurrencyCodeTypeCAD CurrencyCodeType = "CAD"

	CurrencyCodeTypeCVE CurrencyCodeType = "CVE"

	CurrencyCodeTypeKYD CurrencyCodeType = "KYD"

	CurrencyCodeTypeXOF CurrencyCodeType = "XOF"

	CurrencyCodeTypeXAF CurrencyCodeType = "XAF"

	CurrencyCodeTypeXPF CurrencyCodeType = "XPF"

	CurrencyCodeTypeCLP CurrencyCodeType = "CLP"

	CurrencyCodeTypeCNY CurrencyCodeType = "CNY"

	CurrencyCodeTypeCOP CurrencyCodeType = "COP"

	CurrencyCodeTypeKMF CurrencyCodeType = "KMF"

	CurrencyCodeTypeCDF CurrencyCodeType = "CDF"

	CurrencyCodeTypeCRC CurrencyCodeType = "CRC"

	CurrencyCodeTypeHRK CurrencyCodeType = "HRK"

	CurrencyCodeTypeCUP CurrencyCodeType = "CUP"

	CurrencyCodeTypeCYP CurrencyCodeType = "CYP"

	CurrencyCodeTypeCZK CurrencyCodeType = "CZK"

	CurrencyCodeTypeDKK CurrencyCodeType = "DKK"

	CurrencyCodeTypeDEM CurrencyCodeType = "DEM"

	CurrencyCodeTypeDJF CurrencyCodeType = "DJF"

	CurrencyCodeTypeDOP CurrencyCodeType = "DOP"

	CurrencyCodeTypeNLG CurrencyCodeType = "NLG"

	CurrencyCodeTypeXCD CurrencyCodeType = "XCD"

	CurrencyCodeTypeECS CurrencyCodeType = "ECS"

	CurrencyCodeTypeEGP CurrencyCodeType = "EGP"

	CurrencyCodeTypeSVC CurrencyCodeType = "SVC"

	CurrencyCodeTypeERN CurrencyCodeType = "ERN"

	CurrencyCodeTypeEEK CurrencyCodeType = "EEK"

	CurrencyCodeTypeETB CurrencyCodeType = "ETB"

	CurrencyCodeTypeEUR CurrencyCodeType = "EUR"

	CurrencyCodeTypeFKP CurrencyCodeType = "FKP"

	CurrencyCodeTypeFJD CurrencyCodeType = "FJD"

	CurrencyCodeTypeFIM CurrencyCodeType = "FIM"

	CurrencyCodeTypeFRF CurrencyCodeType = "FRF"

	CurrencyCodeTypeGMD CurrencyCodeType = "GMD"

	CurrencyCodeTypeGEL CurrencyCodeType = "GEL"

	CurrencyCodeTypeGHC CurrencyCodeType = "GHC"

	CurrencyCodeTypeGIP CurrencyCodeType = "GIP"

	CurrencyCodeTypeGRD CurrencyCodeType = "GRD"

	CurrencyCodeTypeGTQ CurrencyCodeType = "GTQ"

	CurrencyCodeTypeGYD CurrencyCodeType = "GYD"

	CurrencyCodeTypeHTG CurrencyCodeType = "HTG"

	CurrencyCodeTypeHNL CurrencyCodeType = "HNL"

	CurrencyCodeTypeHKD CurrencyCodeType = "HKD"

	CurrencyCodeTypeHUF CurrencyCodeType = "HUF"

	CurrencyCodeTypeISK CurrencyCodeType = "ISK"

	CurrencyCodeTypeINR CurrencyCodeType = "INR"

	CurrencyCodeTypeIDR CurrencyCodeType = "IDR"

	CurrencyCodeTypeIRR CurrencyCodeType = "IRR"

	CurrencyCodeTypeIQD CurrencyCodeType = "IQD"

	CurrencyCodeTypeIEP CurrencyCodeType = "IEP"

	CurrencyCodeTypeILS CurrencyCodeType = "ILS"

	CurrencyCodeTypeITL CurrencyCodeType = "ITL"

	CurrencyCodeTypeJMD CurrencyCodeType = "JMD"

	CurrencyCodeTypeJPY CurrencyCodeType = "JPY"

	CurrencyCodeTypeJOD CurrencyCodeType = "JOD"

	CurrencyCodeTypeKZT CurrencyCodeType = "KZT"

	CurrencyCodeTypeKES CurrencyCodeType = "KES"

	CurrencyCodeTypeKWD CurrencyCodeType = "KWD"

	CurrencyCodeTypeKGS CurrencyCodeType = "KGS"

	CurrencyCodeTypeLAK CurrencyCodeType = "LAK"

	CurrencyCodeTypeLVL CurrencyCodeType = "LVL"

	CurrencyCodeTypeLBP CurrencyCodeType = "LBP"

	CurrencyCodeTypeLSL CurrencyCodeType = "LSL"

	CurrencyCodeTypeLRD CurrencyCodeType = "LRD"

	CurrencyCodeTypeLYD CurrencyCodeType = "LYD"

	CurrencyCodeTypeLTL CurrencyCodeType = "LTL"

	CurrencyCodeTypeLUF CurrencyCodeType = "LUF"

	CurrencyCodeTypeMOP CurrencyCodeType = "MOP"

	CurrencyCodeTypeMKD CurrencyCodeType = "MKD"

	CurrencyCodeTypeMGF CurrencyCodeType = "MGF"

	CurrencyCodeTypeMWK CurrencyCodeType = "MWK"

	CurrencyCodeTypeMYR CurrencyCodeType = "MYR"

	CurrencyCodeTypeMVR CurrencyCodeType = "MVR"

	CurrencyCodeTypeMTL CurrencyCodeType = "MTL"

	CurrencyCodeTypeMRO CurrencyCodeType = "MRO"

	CurrencyCodeTypeMUR CurrencyCodeType = "MUR"

	CurrencyCodeTypeMXN CurrencyCodeType = "MXN"

	CurrencyCodeTypeMDL CurrencyCodeType = "MDL"

	CurrencyCodeTypeMNT CurrencyCodeType = "MNT"

	CurrencyCodeTypeMAD CurrencyCodeType = "MAD"

	CurrencyCodeTypeMZM CurrencyCodeType = "MZM"

	CurrencyCodeTypeMMK CurrencyCodeType = "MMK"

	CurrencyCodeTypeNAD CurrencyCodeType = "NAD"

	CurrencyCodeTypeNPR CurrencyCodeType = "NPR"

	CurrencyCodeTypeANG CurrencyCodeType = "ANG"

	CurrencyCodeTypeZRN CurrencyCodeType = "ZRN"

	CurrencyCodeTypeNZD CurrencyCodeType = "NZD"

	CurrencyCodeTypeNIC CurrencyCodeType = "NIC"

	CurrencyCodeTypeNGN CurrencyCodeType = "NGN"

	CurrencyCodeTypeKPW CurrencyCodeType = "KPW"

	CurrencyCodeTypeNOK CurrencyCodeType = "NOK"

	CurrencyCodeTypePKR CurrencyCodeType = "PKR"

	CurrencyCodeTypePAB CurrencyCodeType = "PAB"

	CurrencyCodeTypePGK CurrencyCodeType = "PGK"

	CurrencyCodeTypePYG CurrencyCodeType = "PYG"

	CurrencyCodeTypePEN CurrencyCodeType = "PEN"

	CurrencyCodeTypePHP CurrencyCodeType = "PHP"

	CurrencyCodeTypePLN CurrencyCodeType = "PLN"

	CurrencyCodeTypePTE CurrencyCodeType = "PTE"

	CurrencyCodeTypeQAR CurrencyCodeType = "QAR"

	CurrencyCodeTypeOMR CurrencyCodeType = "OMR"

	CurrencyCodeTypeROL CurrencyCodeType = "ROL"

	CurrencyCodeTypeRUR CurrencyCodeType = "RUR"

	CurrencyCodeTypeRWF CurrencyCodeType = "RWF"

	CurrencyCodeTypeSTD CurrencyCodeType = "STD"

	CurrencyCodeTypeSAR CurrencyCodeType = "SAR"

	CurrencyCodeTypeSCR CurrencyCodeType = "SCR"

	CurrencyCodeTypeSLL CurrencyCodeType = "SLL"

	CurrencyCodeTypeSGD CurrencyCodeType = "SGD"

	CurrencyCodeTypeSKK CurrencyCodeType = "SKK"

	CurrencyCodeTypeSIT CurrencyCodeType = "SIT"

	CurrencyCodeTypeSBD CurrencyCodeType = "SBD"

	CurrencyCodeTypeSOS CurrencyCodeType = "SOS"

	CurrencyCodeTypeZAR CurrencyCodeType = "ZAR"

	CurrencyCodeTypeKRW CurrencyCodeType = "KRW"

	CurrencyCodeTypeESP CurrencyCodeType = "ESP"

	CurrencyCodeTypeLKR CurrencyCodeType = "LKR"

	CurrencyCodeTypeSHP CurrencyCodeType = "SHP"

	CurrencyCodeTypeGBP CurrencyCodeType = "GBP"

	CurrencyCodeTypeSDP CurrencyCodeType = "SDP"

	CurrencyCodeTypeSRG CurrencyCodeType = "SRG"

	CurrencyCodeTypeSZL CurrencyCodeType = "SZL"

	CurrencyCodeTypeSEK CurrencyCodeType = "SEK"

	CurrencyCodeTypeCHF CurrencyCodeType = "CHF"

	CurrencyCodeTypeSYP CurrencyCodeType = "SYP"

	CurrencyCodeTypeTWD CurrencyCodeType = "TWD"

	CurrencyCodeTypeTJR CurrencyCodeType = "TJR"

	CurrencyCodeTypeTZS CurrencyCodeType = "TZS"

	CurrencyCodeTypeTHB CurrencyCodeType = "THB"

	CurrencyCodeTypeTPE CurrencyCodeType = "TPE"

	CurrencyCodeTypeTOP CurrencyCodeType = "TOP"

	CurrencyCodeTypeTTD CurrencyCodeType = "TTD"

	CurrencyCodeTypeTND CurrencyCodeType = "TND"

	CurrencyCodeTypeTRL CurrencyCodeType = "TRL"

	CurrencyCodeTypeTMM CurrencyCodeType = "TMM"

	CurrencyCodeTypeAED CurrencyCodeType = "AED"

	CurrencyCodeTypeUGX CurrencyCodeType = "UGX"

	CurrencyCodeTypeUAH CurrencyCodeType = "UAH"

	CurrencyCodeTypeUYU CurrencyCodeType = "UYU"

	CurrencyCodeTypeUSD CurrencyCodeType = "USD"

	CurrencyCodeTypeUZS CurrencyCodeType = "UZS"

	CurrencyCodeTypeVUV CurrencyCodeType = "VUV"

	CurrencyCodeTypeVEB CurrencyCodeType = "VEB"

	CurrencyCodeTypeVND CurrencyCodeType = "VND"

	CurrencyCodeTypeWST CurrencyCodeType = "WST"

	CurrencyCodeTypeYER CurrencyCodeType = "YER"

	CurrencyCodeTypeYUM CurrencyCodeType = "YUM"

	CurrencyCodeTypeZMK CurrencyCodeType = "ZMK"

	CurrencyCodeTypeZWD CurrencyCodeType = "ZWD"
)

type CurrencyNumberType string

const (
	CurrencyNumberType004 CurrencyNumberType = "004"

	CurrencyNumberType008 CurrencyNumberType = "008"

	CurrencyNumberType012 CurrencyNumberType = "012"

	CurrencyNumberType024 CurrencyNumberType = "024"

	CurrencyNumberType032 CurrencyNumberType = "032"

	CurrencyNumberType051 CurrencyNumberType = "051"

	CurrencyNumberType533 CurrencyNumberType = "533"

	CurrencyNumberType036 CurrencyNumberType = "036"

	CurrencyNumberType040 CurrencyNumberType = "040"

	CurrencyNumberType031 CurrencyNumberType = "031"

	CurrencyNumberType044 CurrencyNumberType = "044"

	CurrencyNumberType048 CurrencyNumberType = "048"

	CurrencyNumberType050 CurrencyNumberType = "050"

	CurrencyNumberType052 CurrencyNumberType = "052"

	CurrencyNumberType974 CurrencyNumberType = "974"

	CurrencyNumberType056 CurrencyNumberType = "056"

	CurrencyNumberType084 CurrencyNumberType = "084"

	CurrencyNumberType060 CurrencyNumberType = "060"

	CurrencyNumberType064 CurrencyNumberType = "064"

	CurrencyNumberType068 CurrencyNumberType = "068"

	CurrencyNumberType977 CurrencyNumberType = "977"

	CurrencyNumberType072 CurrencyNumberType = "072"

	CurrencyNumberType986 CurrencyNumberType = "986"

	CurrencyNumberType096 CurrencyNumberType = "096"

	CurrencyNumberType100 CurrencyNumberType = "100"

	CurrencyNumberType108 CurrencyNumberType = "108"

	CurrencyNumberType116 CurrencyNumberType = "116"

	CurrencyNumberType124 CurrencyNumberType = "124"

	CurrencyNumberType132 CurrencyNumberType = "132"

	CurrencyNumberType136 CurrencyNumberType = "136"

	CurrencyNumberType952 CurrencyNumberType = "952"

	CurrencyNumberType950 CurrencyNumberType = "950"

	CurrencyNumberType953 CurrencyNumberType = "953"

	CurrencyNumberType152 CurrencyNumberType = "152"

	CurrencyNumberType156 CurrencyNumberType = "156"

	CurrencyNumberType170 CurrencyNumberType = "170"

	CurrencyNumberType174 CurrencyNumberType = "174"

	CurrencyNumberType976 CurrencyNumberType = "976"

	CurrencyNumberType188 CurrencyNumberType = "188"

	CurrencyNumberType191 CurrencyNumberType = "191"

	CurrencyNumberType192 CurrencyNumberType = "192"

	CurrencyNumberType196 CurrencyNumberType = "196"

	CurrencyNumberType203 CurrencyNumberType = "203"

	CurrencyNumberType208 CurrencyNumberType = "208"

	CurrencyNumberType276 CurrencyNumberType = "276"

	CurrencyNumberType262 CurrencyNumberType = "262"

	CurrencyNumberType214 CurrencyNumberType = "214"

	CurrencyNumberType528 CurrencyNumberType = "528"

	CurrencyNumberType951 CurrencyNumberType = "951"

	CurrencyNumberType218 CurrencyNumberType = "218"

	CurrencyNumberType818 CurrencyNumberType = "818"

	CurrencyNumberType222 CurrencyNumberType = "222"

	CurrencyNumberType232 CurrencyNumberType = "232"

	CurrencyNumberType233 CurrencyNumberType = "233"

	CurrencyNumberType230 CurrencyNumberType = "230"

	CurrencyNumberType978 CurrencyNumberType = "978"

	CurrencyNumberType238 CurrencyNumberType = "238"

	CurrencyNumberType242 CurrencyNumberType = "242"

	CurrencyNumberType246 CurrencyNumberType = "246"

	CurrencyNumberType250 CurrencyNumberType = "250"

	CurrencyNumberType270 CurrencyNumberType = "270"

	CurrencyNumberType268 CurrencyNumberType = "268"

	CurrencyNumberType288 CurrencyNumberType = "288"

	CurrencyNumberType292 CurrencyNumberType = "292"

	CurrencyNumberType300 CurrencyNumberType = "300"

	CurrencyNumberType320 CurrencyNumberType = "320"

	CurrencyNumberType328 CurrencyNumberType = "328"

	CurrencyNumberType332 CurrencyNumberType = "332"

	CurrencyNumberType340 CurrencyNumberType = "340"

	CurrencyNumberType344 CurrencyNumberType = "344"

	CurrencyNumberType348 CurrencyNumberType = "348"

	CurrencyNumberType352 CurrencyNumberType = "352"

	CurrencyNumberType356 CurrencyNumberType = "356"

	CurrencyNumberType360 CurrencyNumberType = "360"

	CurrencyNumberType364 CurrencyNumberType = "364"

	CurrencyNumberType368 CurrencyNumberType = "368"

	CurrencyNumberType372 CurrencyNumberType = "372"

	CurrencyNumberType376 CurrencyNumberType = "376"

	CurrencyNumberType380 CurrencyNumberType = "380"

	CurrencyNumberType388 CurrencyNumberType = "388"

	CurrencyNumberType392 CurrencyNumberType = "392"

	CurrencyNumberType400 CurrencyNumberType = "400"

	CurrencyNumberType398 CurrencyNumberType = "398"

	CurrencyNumberType404 CurrencyNumberType = "404"

	CurrencyNumberType414 CurrencyNumberType = "414"

	CurrencyNumberType417 CurrencyNumberType = "417"

	CurrencyNumberType418 CurrencyNumberType = "418"

	CurrencyNumberType428 CurrencyNumberType = "428"

	CurrencyNumberType422 CurrencyNumberType = "422"

	CurrencyNumberType426 CurrencyNumberType = "426"

	CurrencyNumberType430 CurrencyNumberType = "430"

	CurrencyNumberType434 CurrencyNumberType = "434"

	CurrencyNumberType440 CurrencyNumberType = "440"

	CurrencyNumberType442 CurrencyNumberType = "442"

	CurrencyNumberType446 CurrencyNumberType = "446"

	CurrencyNumberType807 CurrencyNumberType = "807"

	CurrencyNumberType450 CurrencyNumberType = "450"

	CurrencyNumberType454 CurrencyNumberType = "454"

	CurrencyNumberType458 CurrencyNumberType = "458"

	CurrencyNumberType462 CurrencyNumberType = "462"

	CurrencyNumberType470 CurrencyNumberType = "470"

	CurrencyNumberType478 CurrencyNumberType = "478"

	CurrencyNumberType480 CurrencyNumberType = "480"

	CurrencyNumberType484 CurrencyNumberType = "484"

	CurrencyNumberType498 CurrencyNumberType = "498"

	CurrencyNumberType496 CurrencyNumberType = "496"

	CurrencyNumberType504 CurrencyNumberType = "504"

	CurrencyNumberType508 CurrencyNumberType = "508"

	CurrencyNumberType104 CurrencyNumberType = "104"

	CurrencyNumberType516 CurrencyNumberType = "516"

	CurrencyNumberType524 CurrencyNumberType = "524"

	CurrencyNumberType532 CurrencyNumberType = "532"

	CurrencyNumberType186 CurrencyNumberType = "186"

	CurrencyNumberType554 CurrencyNumberType = "554"

	CurrencyNumberType558 CurrencyNumberType = "558"

	CurrencyNumberType566 CurrencyNumberType = "566"

	CurrencyNumberType408 CurrencyNumberType = "408"

	CurrencyNumberType578 CurrencyNumberType = "578"

	CurrencyNumberType586 CurrencyNumberType = "586"

	CurrencyNumberType590 CurrencyNumberType = "590"

	CurrencyNumberType598 CurrencyNumberType = "598"

	CurrencyNumberType600 CurrencyNumberType = "600"

	CurrencyNumberType604 CurrencyNumberType = "604"

	CurrencyNumberType608 CurrencyNumberType = "608"

	CurrencyNumberType985 CurrencyNumberType = "985"

	CurrencyNumberType620 CurrencyNumberType = "620"

	CurrencyNumberType634 CurrencyNumberType = "634"

	CurrencyNumberType512 CurrencyNumberType = "512"

	CurrencyNumberType642 CurrencyNumberType = "642"

	CurrencyNumberType810 CurrencyNumberType = "810"

	CurrencyNumberType646 CurrencyNumberType = "646"

	CurrencyNumberType678 CurrencyNumberType = "678"

	CurrencyNumberType682 CurrencyNumberType = "682"

	CurrencyNumberType690 CurrencyNumberType = "690"

	CurrencyNumberType694 CurrencyNumberType = "694"

	CurrencyNumberType702 CurrencyNumberType = "702"

	CurrencyNumberType703 CurrencyNumberType = "703"

	CurrencyNumberType705 CurrencyNumberType = "705"

	CurrencyNumberType090 CurrencyNumberType = "090"

	CurrencyNumberType706 CurrencyNumberType = "706"

	CurrencyNumberType710 CurrencyNumberType = "710"

	CurrencyNumberType410 CurrencyNumberType = "410"

	CurrencyNumberType724 CurrencyNumberType = "724"

	CurrencyNumberType144 CurrencyNumberType = "144"

	CurrencyNumberType654 CurrencyNumberType = "654"

	CurrencyNumberType826 CurrencyNumberType = "826"

	CurrencyNumberType736 CurrencyNumberType = "736"

	CurrencyNumberType740 CurrencyNumberType = "740"

	CurrencyNumberType748 CurrencyNumberType = "748"

	CurrencyNumberType752 CurrencyNumberType = "752"

	CurrencyNumberType756 CurrencyNumberType = "756"

	CurrencyNumberType760 CurrencyNumberType = "760"

	CurrencyNumberType901 CurrencyNumberType = "901"

	CurrencyNumberType762 CurrencyNumberType = "762"

	CurrencyNumberType834 CurrencyNumberType = "834"

	CurrencyNumberType764 CurrencyNumberType = "764"

	CurrencyNumberType626 CurrencyNumberType = "626"

	CurrencyNumberType776 CurrencyNumberType = "776"

	CurrencyNumberType780 CurrencyNumberType = "780"

	CurrencyNumberType788 CurrencyNumberType = "788"

	CurrencyNumberType792 CurrencyNumberType = "792"

	CurrencyNumberType795 CurrencyNumberType = "795"

	CurrencyNumberType784 CurrencyNumberType = "784"

	CurrencyNumberType800 CurrencyNumberType = "800"

	CurrencyNumberType980 CurrencyNumberType = "980"

	CurrencyNumberType858 CurrencyNumberType = "858"

	CurrencyNumberType840 CurrencyNumberType = "840"

	CurrencyNumberType860 CurrencyNumberType = "860"

	CurrencyNumberType548 CurrencyNumberType = "548"

	CurrencyNumberType862 CurrencyNumberType = "862"

	CurrencyNumberType704 CurrencyNumberType = "704"

	CurrencyNumberType882 CurrencyNumberType = "882"

	CurrencyNumberType886 CurrencyNumberType = "886"

	CurrencyNumberType891 CurrencyNumberType = "891"

	CurrencyNumberType894 CurrencyNumberType = "894"

	CurrencyNumberType716 CurrencyNumberType = "716"
)

// The purpose of the artwork file

type ArtworkType string

const (
	ArtworkTypeNonProductionReady ArtworkType = "NonProductionReady"

	ArtworkTypeProductionReady ArtworkType = "ProductionReady"

	ArtworkTypeSupplierArtTemplate ArtworkType = "SupplierArtTemplate"

	ArtworkTypeVirtualProof ArtworkType = "VirtualProof"
)

// The type of charge

type ChargeTypeType string

const (
	ChargeTypeTypeFreight ChargeTypeType = "Freight"

	ChargeTypeTypeOrder ChargeTypeType = "Order"

	ChargeTypeTypeRun ChargeTypeType = "Run"

	ChargeTypeTypeSetup ChargeTypeType = "Setup"
)

// The type of color system

type ColorSystemType string

const (
	ColorSystemTypeCmyk ColorSystemType = "Cmyk"

	ColorSystemTypeOther ColorSystemType = "Other"

	ColorSystemTypePms ColorSystemType = "Pms"

	ColorSystemTypeRgb ColorSystemType = "Rgb"

	ColorSystemTypeThread ColorSystemType = "Thread"
)

// The type of contact

type ContactTypeType string

const (
	ContactTypeTypeArt ContactTypeType = "Art"

	ContactTypeTypeBill ContactTypeType = "Bill"

	ContactTypeTypeExpeditor ContactTypeType = "Expeditor"

	ContactTypeTypeOrder ContactTypeType = "Order"

	ContactTypeTypeSales ContactTypeType = "Sales"

	ContactTypeTypeSold ContactTypeType = "Sold"
)

// The type of digital proof address

type DigitalProofAddressTypeType string

const (
	DigitalProofAddressTypeTypeEmail DigitalProofAddressTypeType = "Email"

	DigitalProofAddressTypeTypeWebservice DigitalProofAddressTypeType = "Webservice"
)

// The geometry type

type GeometryType string

const (
	GeometryTypeCircle GeometryType = "Circle"

	GeometryTypeOther GeometryType = "Other"

	GeometryTypeRectangle GeometryType = "Rectangle"
)

// The type of order line

type LineTypeType string

const (
	LineTypeTypeNew LineTypeType = "New"

	LineTypeTypeReference LineTypeType = "Reference"

	LineTypeTypeRepeat LineTypeType = "Repeat"
)

// The type of order

type OrderTypeType string

const (
	OrderTypeTypeBlank OrderTypeType = "Blank"

	OrderTypeTypeConfigured OrderTypeType = "Configured"

	OrderTypeTypeSample OrderTypeType = "Sample"

	OrderTypeTypeSimple OrderTypeType = "Simple"
)

// The type of Quantity UOM

type QuantityUomType string

const (
	QuantityUomTypeBX QuantityUomType = "BX"

	QuantityUomTypeCA QuantityUomType = "CA"

	QuantityUomTypeDZ QuantityUomType = "DZ"

	QuantityUomTypeEA QuantityUomType = "EA"

	QuantityUomTypeKT QuantityUomType = "KT"

	QuantityUomTypePK QuantityUomType = "PK"

	QuantityUomTypePR QuantityUomType = "PR"

	QuantityUomTypeRL QuantityUomType = "RL"

	QuantityUomTypeSL QuantityUomType = "SL"

	QuantityUomTypeST QuantityUomType = "ST"

	QuantityUomTypeTH QuantityUomType = "TH"
)

// The type of reference number

type ReferenceNumberTypeType string

const (
	ReferenceNumberTypeTypeJobOrWorkOrder ReferenceNumberTypeType = "JobOrWorkOrder"

	ReferenceNumberTypeTypePurchaseOrder ReferenceNumberTypeType = "PurchaseOrder"

	ReferenceNumberTypeTypeSalesOrder ReferenceNumberTypeType = "SalesOrder"
)

// The severity type

type SeverityType string

const (
	SeverityTypeError SeverityType = "Error"

	SeverityTypeInformation SeverityType = "Information"

	SeverityTypeWarning SeverityType = "Warning"
)

// The type of tax

type TaxTypeType string

const (
	TaxTypeTypeHstGst TaxTypeType = "Hst-Gst"

	TaxTypeTypePst TaxTypeType = "Pst"

	TaxTypeTypeSalesTax TaxTypeType = "SalesTax"
)

// The type of tolerance allowed

type ToleranceType string

const (
	ToleranceTypeAllowOverrun ToleranceType = "AllowOverrun"

	ToleranceTypeAllowUnderrun ToleranceType = "AllowUnderrun"

	ToleranceTypeAllowOverrunOrUnderrun ToleranceType = "AllowOverrunOrUnderrun"

	ToleranceTypeExactOnly ToleranceType = "ExactOnly"
)

// The type of tolerance UOM

type ToleranceUomType string

const (
	ToleranceUomTypePercent ToleranceUomType = "Percent"

	ToleranceUomTypeQuantity ToleranceUomType = "Quantity"
)

// The type of transport mechanism

type TransportMechanismType string

const (
	TransportMechanismTypeArtworkToFollow TransportMechanismType = "ArtworkToFollow"

	TransportMechanismTypeEmail TransportMechanismType = "Email"

	TransportMechanismTypeFtp TransportMechanismType = "Ftp"

	TransportMechanismTypeUrl TransportMechanismType = "Url"
)

type ArtworkFileArray struct {
	XMLName xml.Name `xml:"http://www.promostandards.org/WSDL/PO/1.0.0/SharedObjects/ ArtworkFileArray"`

	ArtworkFile []*ArtworkFile `xml:"ArtworkFile,omitempty" json:"ArtworkFile,omitempty"`
}

type ArtworkFile struct {
	XMLName xml.Name `xml:"http://www.promostandards.org/WSDL/PO/1.0.0/SharedObjects/ ArtworkFile"`

	// The purpose of the artwork file; values are enumerated

	ArtworkType *ArtworkType `xml:"artworkType,omitempty" json:"artworkType,omitempty"`

	// The exact path/location to the artwork

	FileLocation string `xml:"fileLocation,omitempty" json:"fileLocation,omitempty"`

	// The file name and extension only of the artwork

	FileName string `xml:"fileName,omitempty" json:"fileName,omitempty"`

	// The mechanism that will be used to transport the artwork; values are enumerated

	TransportMechanism *TransportMechanismType `xml:"transportMechanism,omitempty" json:"transportMechanism,omitempty"`
}

type Artwork struct {
	XMLName xml.Name `xml:"http://www.promostandards.org/WSDL/PO/1.0.0/SharedObjects/ Artwork"`

	// Any instructions regarding the processing or modification of artwork. Adding instructions will cause delays in processing.
	Instructions string `xml:"instructions,omitempty" json:"instructions,omitempty"`

	// A pre-shared artwork Id that can be used by the supplier to find and reference the artwork.

	RefArtworkId string `xml:"refArtworkId,omitempty" json:"refArtworkId,omitempty"`

	// The total stitch count for the specified embroidery art
	TotalStitchCount int32 `xml:"totalStitchCount,omitempty" json:"totalStitchCount,omitempty"`

	ArtworkFileArray *ArtworkFileArray `xml:"ArtworkFileArray,omitempty" json:"ArtworkFileArray,omitempty"`

	Description *Description `xml:"description,omitempty" json:"description,omitempty"`

	Dimensions *Dimensions `xml:"Dimensions,omitempty" json:"Dimensions,omitempty"`

	Layers *Layers `xml:"Layers,omitempty" json:"Layers,omitempty"`

	TypesetArray *TypesetArray `xml:"TypesetArray,omitempty" json:"TypesetArray,omitempty"`
}

type ChargeId int32

type Charge struct {
	XMLName xml.Name `xml:"http://www.promostandards.org/WSDL/PO/1.0.0/SharedObjects/ Charge"`

	ChargeName *ChargeName `xml:"chargeName,omitempty" json:"chargeName,omitempty"`

	Description *Description `xml:"description,omitempty" json:"description,omitempty"`

	ExtendedPrice *ExtendedPrice `xml:"extendedPrice,omitempty" json:"extendedPrice,omitempty"`

	UnitPrice *UnitPrice `xml:"unitPrice,omitempty" json:"unitPrice,omitempty"`

	ChargeId *ChargeId `xml:"chargeId,omitempty" json:"chargeId,omitempty"`

	ChargeType *ChargeType `xml:"chargeType,omitempty" json:"chargeType,omitempty"`

	Quantity *Quantity `xml:"Quantity,omitempty" json:"Quantity,omitempty"`
}

type Comments string

type Configuration struct {
	XMLName xml.Name `xml:"http://www.promostandards.org/WSDL/PO/1.0.0/SharedObjects/ Configuration"`

	ChargeArray struct {
		Charge []*Charge `xml:"Charge,omitempty" json:"Charge,omitempty"`
	} `xml:"ChargeArray,omitempty" json:"ChargeArray,omitempty"`

	LocationArray struct {
		Location []*Location `xml:"Location,omitempty" json:"Location,omitempty"`
	} `xml:"LocationArray,omitempty" json:"LocationArray,omitempty"`

	// The type of the prior order reference; values are enumerated

	ReferenceNumberType *ReferenceNumberTypeType `xml:"referenceNumberType,omitempty" json:"referenceNumberType,omitempty"`

	// The previous order number that this purchase order is referencing

	ReferenceNumber string `xml:"referenceNumber,omitempty" json:"referenceNumber,omitempty"`

	// Indicates that this line item is for a preproduction proof
	PreProductionProof bool `xml:"preProductionProof" json:"preProductionProof"`
}

type ContactDetails struct {
	XMLName xml.Name `xml:"http://www.promostandards.org/WSDL/PO/1.0.0/SharedObjects/ ContactDetails"`

	// Attention To (first and last name of contact)

	AttentionTo string `xml:"http://www.promostandards.org/WSDL/PO/1.0.0/SharedObjects/ attentionTo,omitempty" json:"attentionTo,omitempty"`

	// The company name

	CompanyName string `xml:"http://www.promostandards.org/WSDL/PO/1.0.0/SharedObjects/ companyName,omitempty" json:"companyName,omitempty"`

	// Address line 1

	Address1 string `xml:"http://www.promostandards.org/WSDL/PO/1.0.0/SharedObjects/ address1,omitempty" json:"address1,omitempty"`

	// Address line 2

	Address2 string `xml:"http://www.promostandards.org/WSDL/PO/1.0.0/SharedObjects/ address2,omitempty" json:"address2,omitempty"`

	// Address line 3

	Address3 string `xml:"http://www.promostandards.org/WSDL/PO/1.0.0/SharedObjects/ address3,omitempty" json:"address3,omitempty"`

	// The city

	City string `xml:"http://www.promostandards.org/WSDL/PO/1.0.0/SharedObjects/ city,omitempty" json:"city,omitempty"`

	// The 2 character US state abbreviation or 2-3 character non-US region

	Region string `xml:"http://www.promostandards.org/WSDL/PO/1.0.0/SharedObjects/ region,omitempty" json:"region,omitempty"`

	// The postal code

	PostalCode string `xml:"http://www.promostandards.org/WSDL/PO/1.0.0/SharedObjects/ postalCode,omitempty" json:"postalCode,omitempty"`

	// The country

	Country *ISO3166CountyCode `xml:"http://www.promostandards.org/WSDL/PO/1.0.0/SharedObjects/ country,omitempty" json:"country,omitempty"`

	Email string `xml:"http://www.promostandards.org/WSDL/PO/1.0.0/SharedObjects/ email,omitempty" json:"email,omitempty"`

	// The phone

	Phone string `xml:"http://www.promostandards.org/WSDL/PO/1.0.0/SharedObjects/ phone,omitempty" json:"phone,omitempty"`

	Comments string `xml:"http://www.promostandards.org/WSDL/PO/1.0.0/SharedObjects/ comments,omitempty" json:"comments,omitempty"`
}

type Contact struct {
	XMLName xml.Name `xml:"http://www.promostandards.org/WSDL/PO/1.0.0/SharedObjects/ Contact"`

	AccountName *AccountName `xml:"accountName,omitempty" json:"accountName,omitempty"`

	AccountNumber *AccountNumber `xml:"accountNumber,omitempty" json:"accountNumber,omitempty"`

	// The type of contact.

	ContactType *ContactTypeType `xml:"contactType,omitempty" json:"contactType,omitempty"`

	ContactDetails *ContactDetails `xml:"ContactDetails,omitempty" json:"ContactDetails,omitempty"`
}

type Currency CurrencyCodeType

type DecorationId int32

type Decoration struct {
	XMLName xml.Name `xml:"http://www.promostandards.org/WSDL/PO/1.0.0/SharedObjects/ Decoration"`

	DecorationName *DecorationName `xml:"decorationName,omitempty" json:"decorationName,omitempty"`

	Artwork *Artwork `xml:"Artwork,omitempty" json:"Artwork,omitempty"`

	DecorationId *DecorationId `xml:"decorationId,omitempty" json:"decorationId,omitempty"`
}



type DigitalProofAddress struct {
	XMLName xml.Name `xml:"http://www.promostandards.org/WSDL/PO/1.0.0/SharedObjects/ DigitalProofAddress"`

	// The type of address of the digital proof. Values are enumerated: Email, Webservice

	Type *DigitalProofAddressTypeType `xml:"type,omitempty" json:"type,omitempty"`

	Email string `xml:"email,omitempty" json:"email,omitempty"`

	LineItemGroupingId *LineItemGroupingId `xml:"lineItemGroupingId,omitempty" json:"lineItemGroupingId,omitempty"`
}

type DigitalProof struct {
	XMLName xml.Name `xml:"http://www.promostandards.org/WSDL/PO/1.0.0/SharedObjects/ DigitalProof"`

	DigitalProofAddressArray struct {
		DigitalProofAddress []*DigitalProofAddress `xml:"DigitalProofAddress,omitempty" json:"DigitalProofAddress,omitempty"`
	} `xml:"DigitalProofAddressArray,omitempty" json:"DigitalProofAddressArray,omitempty"`

	// A Boolean value set to TRUE indicates a proof is required for this purchase order; the value is FALSE otherwise.
	Required bool `xml:"required" json:"required"`
}

type Dimensions struct {
	XMLName xml.Name `xml:"http://www.promostandards.org/WSDL/PO/1.0.0/SharedObjects/ Dimensions"`

	Diameter *Diameter `xml:"diameter,omitempty" json:"diameter,omitempty"`

	Height *Height `xml:"height,omitempty" json:"height,omitempty"`

	Uom *Uom `xml:"uom,omitempty" json:"uom,omitempty"`

	Width *Width `xml:"width,omitempty" json:"width,omitempty"`

	UseMaxLocationDimensions bool `xml:"useMaxLocationDimensions" json:"useMaxLocationDimensions"`

	Geometry *Geometry `xml:"geometry,omitempty" json:"geometry,omitempty"`
}

type ExtendedPrice float64

type FreightDetails struct {
	XMLName xml.Name `xml:"http://www.promostandards.org/WSDL/PO/1.0.0/SharedObjects/ FreightDetails"`

	// The carrier used for this shipment.

	Carrier string `xml:"http://www.promostandards.org/WSDL/PO/1.0.0/SharedObjects/ carrier,omitempty" json:"carrier,omitempty"`

	// The service type requested by the carrier.

	Service string `xml:"http://www.promostandards.org/WSDL/PO/1.0.0/SharedObjects/ service,omitempty" json:"service,omitempty"`
}

type LayerOrStop struct {
	XMLName xml.Name `xml:"http://www.promostandards.org/WSDL/PO/1.0.0/SharedObjects/ LayerOrStop"`

	// The color value that corresponds to the colorSystem defined

	Color string `xml:"color,omitempty" json:"color,omitempty"`

	// The name or number of the layer/stop

	NameOrNumber string `xml:"nameOrNumber,omitempty" json:"nameOrNumber,omitempty"`

	Description *Description `xml:"description,omitempty" json:"description,omitempty"`
}

type Layers struct {
	XMLName xml.Name `xml:"http://www.promostandards.org/WSDL/PO/1.0.0/SharedObjects/ Layers"`

	// The color system to use

	ColorSystem *ColorSystemType `xml:"colorSystem,omitempty" json:"colorSystem,omitempty"`

	LayerOrStopArray struct {
		LayerOrStop []*LayerOrStop `xml:"LayerOrStop,omitempty" json:"LayerOrStop,omitempty"`
	} `xml:"LayerOrStopArray,omitempty" json:"LayerOrStopArray,omitempty"`
}

type LineItemGroupingId int32

type LocationId int32

type LocationLinkId int32

type Location struct {
	XMLName xml.Name `xml:"http://www.promostandards.org/WSDL/PO/1.0.0/SharedObjects/ Location"`

	LocationName *LocationName `xml:"locationName,omitempty" json:"locationName,omitempty"`

	DecorationArray struct {
		Decoration []*Decoration `xml:"Decoration,omitempty" json:"Decoration,omitempty"`
	} `xml:"DecorationArray,omitempty" json:"DecorationArray,omitempty"`

	// An identifier to be used within the Part Array to link configured locations to a part. Due to different colors and sizes, identical locations may need to be decorated differently.
	LocationLinkId int32 `xml:"locationLinkId,omitempty" json:"locationLinkId,omitempty"`

	LocationId *LocationId `xml:"locationId,omitempty" json:"locationId,omitempty"`
}

type ShipmentLinkArray struct {
	ShipmentLink []*ShipmentLink `xml:"http://www.promostandards.org/WSDL/PO/1.0.0/SharedObjects/ ShipmentLinkArrayShipmentLink,omitempty" json:"ShipmentLink,omitempty"`
}

type Part struct {
	XMLName xml.Name `xml:"http://www.promostandards.org/WSDL/PO/1.0.0/SharedObjects/ Part"`

	PartGroup string `xml:"partGroup,omitempty" json:"partGroup,omitempty"`

	PartId string `xml:"http://www.promostandards.org/WSDL/PO/1.0.0/SharedObjects/ partId,omitempty" json:"partId,omitempty"`

	// How the part is being represented to the distributor's customer

	CustomerPartId string `xml:"customerPartId,omitempty" json:"customerPartId,omitempty"`

	// The part will be supplied by the customer or another entity other than the supplier
	CustomerSupplied bool `xml:"http://www.promostandards.org/WSDL/PO/1.0.0/SharedObjects/ customerSupplied" json:"customerSupplied,omitempty"`

	Description string `xml:"description,omitempty" json:"description,omitempty"`

	Quantity *Quantity `xml:"http://www.promostandards.org/WSDL/PO/1.0.0/SharedObjects/ Quantity,omitempty" json:"Quantity,omitempty"`

	LocationLinkId []*LocationLinkId `xml:"http://www.promostandards.org/WSDL/PO/1.0.0/SharedObjects/ locationLinkId,omitempty" json:"locationLinkId,omitempty"`

	UnitPrice *UnitPrice `xml:"unitPrice,omitempty" json:"unitPrice,omitempty"`

	ExtendedPrice *ExtendedPrice `xml:"extendedPrice,omitempty" json:"extendedPrice,omitempty"`

	ShipmentLinkArray *ShipmentLinkArray `xml:"ShipmentLinkArray,omitempty" json:"ShipmentLinkArray,omitempty"`

}

type Program struct {
	XMLName xml.Name `xml:"http://www.promostandards.org/WSDL/PO/1.0.0/SharedObjects/ Program"`

	Id string `xml:"id,omitempty" json:"id,omitempty"`

	Name string `xml:"name,omitempty" json:"name,omitempty"`
}

type Quantity struct {
	XMLName xml.Name `xml:"http://www.promostandards.org/WSDL/PO/1.0.0/SharedObjects/ Quantity"`

	// The unit of measure; values are enumerated.

	Uom *QuantityUomType `xml:"http://www.promostandards.org/WSDL/PO/1.0.0/SharedObjects/ uom,omitempty" json:"uom,omitempty"`

	// The quantity value
	Value float64 `xml:"http://www.promostandards.org/WSDL/PO/1.0.0/SharedObjects/ value,omitempty" json:"value,omitempty"`
}

type ServiceMessageArray struct {
	XMLName xml.Name `xml:"http://www.promostandards.org/WSDL/PO/1.0.0/SharedObjects/ ServiceMessageArray"`

	ServiceMessage []*ServiceMessage `xml:"ServiceMessage,omitempty" json:"ServiceMessage,omitempty"`
}

type ServiceMessage struct {
	XMLName xml.Name `xml:"http://www.promostandards.org/WSDL/PO/1.0.0/SharedObjects/ ServiceMessage"`

	// Response for any error requiring notification to requestor
	Code int32 `xml:"code,omitempty" json:"code,omitempty"`

	// Response for any error requiring notification to requestor

	Description string `xml:"description,omitempty" json:"description,omitempty"`

	// The severity of the error. Values are enumerated: {Error, Information, Warning}

	Severity *SeverityType `xml:"severity,omitempty" json:"severity,omitempty"`
}

type ShipmentId int32

type ShipmentLink struct {
	XMLName xml.Name `xml:"http://www.promostandards.org/WSDL/PO/1.0.0/SharedObjects/ ShipmentLink"`

	Quantity *Quantity `xml:"Quantity,omitempty" json:"Quantity,omitempty"`

	ShipmentId *ShipmentId `xml:"shipmentId,omitempty" json:"shipmentId,omitempty"`
}

type Shipment struct {
	XMLName xml.Name `xml:"http://www.promostandards.org/WSDL/PO/1.0.0/SharedObjects/ Shipment"`

	// Array of two strings max

	ShipReferences string `xml:"http://www.promostandards.org/WSDL/PO/1.0.0/SharedObjects/ shipReferences,omitempty" json:"shipReferences,omitempty"`

	Comments string `xml:"http://www.promostandards.org/WSDL/PO/1.0.0/SharedObjects/ comments,omitempty" json:"comments,omitempty"`

	ThirdPartyAccount *ThirdPartyAccount `xml:"ThirdPartyAccount,omitempty" json:"ThirdPartyAccount,omitempty"`

	// Allow consolidation of shipments
	AllowConsolidation bool `xml:"http://www.promostandards.org/WSDL/PO/1.0.0/SharedObjects/ allowConsolidation" json:"allowConsolidation,omitempty"`

	// Require blind shipping
	BlindShip bool `xml:"http://www.promostandards.org/WSDL/PO/1.0.0/SharedObjects/ blindShip" json:"blindShip"`

	// Packing list required
	PackingListRequired bool `xml:"http://www.promostandards.org/WSDL/PO/1.0.0/SharedObjects/ packingListRequired" json:"packingListRequired,omitempty"`

	FreightDetails *FreightDetails `xml:"FreightDetails,omitempty" json:"FreightDetails,omitempty"`

	ShipTo *ShipTo `xml:"ShipTo,omitempty" json:"ShipTo,omitempty"`
}

type ShipTo struct {
	XMLName xml.Name `xml:"http://www.promostandards.org/WSDL/PO/1.0.0/SharedObjects/ ShipTo"`

	// The shipment will be a pickup and will not be shipped.
	CustomerPickup bool `xml:"http://www.promostandards.org/WSDL/PO/1.0.0/SharedObjects/ customerPickup" json:"customerPickup,omitempty"`

	ContactDetails *ContactDetails `xml:"ContactDetails,omitempty" json:"ContactDetails,omitempty"`

	ShipmentId int `xml:"shipmentId" json:"shipmentId,omitempty"`
}

type TaxInformation struct {
	XMLName xml.Name `xml:"http://www.promostandards.org/WSDL/PO/1.0.0/SharedObjects/ TaxInformation"`

	// Tax Jurisdictions

	TaxJurisdiction string `xml:"taxJurisdiction,omitempty" json:"taxJurisdiction,omitempty"`

	// Tax Exempt
	TaxExempt bool `xml:"taxExempt" json:"taxExempt"`

	// The purchasers tax identifier

	TaxId string `xml:"taxId,omitempty" json:"taxId,omitempty"`

	// The type of tax the identifier applies to.

	TaxType *TaxTypeType `xml:"taxType,omitempty" json:"taxType,omitempty"`

	// The amount of tax for this purchase order
	TaxAmount float64 `xml:"taxAmount,omitempty" json:"taxAmount,omitempty"`
}

type ThirdPartyAccount struct {
	XMLName xml.Name `xml:"http://www.promostandards.org/WSDL/PO/1.0.0/SharedObjects/ ThirdPartyAccount"`

	AccountName *AccountName `xml:"accountName,omitempty" json:"accountName,omitempty"`

	AccountNumber *AccountNumber `xml:"accountNumber,omitempty" json:"accountNumber,omitempty"`

	ContactDetails *ContactDetails `xml:"ContactDetails,omitempty" json:"ContactDetails,omitempty"`
}

type ToleranceDetails struct {
	XMLName xml.Name `xml:"http://www.promostandards.org/WSDL/PO/1.0.0/SharedObjects/ ToleranceDetails"`

	Uom *ToleranceUomType `xml:"uom,omitempty" json:"uom,omitempty"`

	Value float64 `xml:"value,omitempty" json:"value,omitempty"`

	Tolerance *ToleranceType `xml:"http://www.promostandards.org/WSDL/PO/1.0.0/SharedObjects/ tolerance,omitempty" json:"tolerance,omitempty"`
}

type TypesetArray struct {
	XMLName xml.Name `xml:"http://www.promostandards.org/WSDL/PO/1.0.0/SharedObjects/ TypesetArray"`

	Typeset []*Typeset `xml:"Typeset,omitempty" json:"Typeset,omitempty"`
}

type Typeset struct {
	XMLName xml.Name `xml:"http://www.promostandards.org/WSDL/PO/1.0.0/SharedObjects/ Typeset"`

	// The font size to use for the typeset
	FontSize float64 `xml:"fontSize,omitempty" json:"fontSize,omitempty"`

	// The font to use for the typeset

	Font string `xml:"font,omitempty" json:"font,omitempty"`

	// The order of the typeset information
	SequenceNumber int32 `xml:"sequenceNumber,omitempty" json:"sequenceNumber,omitempty"`

	// The typeset to be used on the order

	Value string `xml:"value,omitempty" json:"value,omitempty"`
}

type UnitPrice float64

type Uom ISO20022UomCode

type GetSupportedOrderTypesRequest struct {
	XMLName xml.Name `xml:"http://www.promostandards.org/WSDL/PO/1.0.0/ GetSupportedOrderTypesRequest"`

	WsVersion *string `xml:"wsVersion,omitempty" json:"wsVersion,omitempty"`

	Id *string `xml:"id,omitempty" json:"id,omitempty"`

	Password *string `xml:"password,omitempty" json:"password,omitempty"`
}

type GetSupportedOrderTypesResponse struct {
	XMLName xml.Name `xml:"http://www.promostandards.org/WSDL/PO/1.0.0/ GetSupportedOrderTypesResponse"`

	SupportedOrderTypes []*OrderTypeType `xml:"supportedOrderTypes,omitempty" json:"supportedOrderTypes,omitempty"`

	ServiceMessageArray *ServiceMessageArray `xml:"ServiceMessageArray,omitempty" json:"ServiceMessageArray,omitempty"`
}

type PartArray struct {
	Part []*Part `xml:"Part,omitempty" json:"Part,omitempty"`
}

type LineItem struct {
	XMLName xml.Name `xml:"http://www.promostandards.org/WSDL/PO/1.0.0/ LineItem"`

	// The line number of the line item
	LineNumber int32 `xml:"lineNumber,omitempty" json:"lineNumber,omitempty"`

	// The line identifier used by the distributor

	LineReferenceId string `xml:"lineReferenceId,omitempty" json:"lineReferenceId,omitempty"`

	Description string `xml:"http://www.promostandards.org/WSDL/PO/1.0.0/SharedObjects/ description,omitempty" json:"description,omitempty"`

	// The type of order

	LineType *LineTypeType `xml:"lineType,omitempty" json:"lineType,omitempty"`

	Quantity *Quantity `xml:"Quantity,omitempty" json:"Quantity,omitempty"`

	FobId *string `xml:"http://www.promostandards.org/WSDL/PO/1.0.0/SharedObjects/ fobId,omitempty" json:"fobId,omitempty"`

	ToleranceDetails *ToleranceDetails `xml:"http://www.promostandards.org/WSDL/PO/1.0.0/SharedObjects/ ToleranceDetails,omitempty" json:"ToleranceDetails,omitempty"`

	// Allow partial shipments of this line item
	AllowPartialShipments bool `xml:"allowPartialShipments" json:"allowPartialShipments"`

	UnitPrice *float64 `xml:"http://www.promostandards.org/WSDL/PO/1.0.0/SharedObjects/ unitPrice" json:"unitPrice,omitempty"`

	LineItemTotal *float64 `xml:"lineItemTotal" json:"lineItemTotal,omitempty"`

	// The date the line item is requested to ship from the FOB point.
	RequestedShipDate *CustomTime `xml:"requestedShipDate,omitempty" json:"requestedShipDate,omitempty"`

	// The date the line item is requested to arrive at the shipping destination
	RequestedInHandsDate *CustomTime `xml:"requestedInHandsDate,omitempty" json:"requestedInHandsDate,omitempty"`

	ReferenceSalesQuote string `xml:"referenceSalesQuote,omitempty" json:"referenceSalesQuote,omitempty"`

	Program *Program `xml:"Program,omitempty" json:"Program,omitempty"`

	// The distributor's order number provided to the end customer

	EndCustomerSalesOrder string `xml:"endCustomerSalesOrder,omitempty" json:"endCustomerSalesOrder,omitempty"`

	ProductId *ProductId `xml:"productId,omitempty" json:"productId,omitempty"`

	// The distributor's product id

	CustomerProductId string `xml:"customerProductId,omitempty" json:"customerProductId,omitempty"`

	LineItemGroupingId *LineItemGroupingId `xml:"lineItemGroupingId,omitempty" json:"lineItemGroupingId,omitempty"`

	PartArray PartArray `xml:"PartArray,omitempty" json:"PartArray,omitempty"`

	Configuration *Configuration `xml:"Configuration,omitempty" json:"Configuration,omitempty"`
}

type ShipmentArray struct {
	Shipment []*Shipment `xml:"Shipment,omitempty" json:"Shipment,omitempty"`
}

type LineItemArray struct {
	LineItem []*LineItem `xml:"LineItem,omitempty" json:"LineItem,omitempty"`
}

type PO struct {
	XMLName xml.Name `xml:"http://www.promostandards.org/WSDL/PO/1.0.0/ PO"`

	// The type of data transferred in the request

	OrderType string `xml:"orderType,omitempty" json:"orderType,omitempty"`

	// Purchase order number

	OrderNumber string `xml:"orderNumber,omitempty" json:"orderNumber,omitempty"`

	// The date and time of the purchase order.
	OrderDate *CustomTime `xml:"orderDate,omitempty" json:"orderDate,omitempty"`

	// The date and time the purchase order was last modified
	// LastModified *customTime `xml:"lastModified,omitempty" json:"lastModified,omitempty"`

	// The total dollar amount of the purchase order
	TotalAmount float64 `xml:"totalAmount,omitempty" json:"totalAmount,omitempty"`

	// The terms of the purchase order. i.e. NET15, NET30, etc.
	PaymentTerms string `xml:"paymentTerms,omitempty" json:"paymentTerms,omitempty"`

	// Used to indicate a rush on the purchase order.
	Rush bool `xml:"rush" json:"rush"`

	Currency string `xml:"http://www.promostandards.org/WSDL/PO/1.0.0/SharedObjects/ currency,omitempty" json:"currency,omitempty"`

	// DigitalProof *DigitalProof `xml:"DigitalProof,omitempty" json:"DigitalProof,omitempty"`

	// OrderContactArray struct {
	// 	Contact []*Contact `xml:"Contact,omitempty" json:"Contact,omitempty"`
	// } `xml:"OrderContactArray,omitempty" json:"OrderContactArray,omitempty"`

	ShipmentArray ShipmentArray `xml:"ShipmentArray,omitempty" json:"ShipmentArray,omitempty"`

	LineItemArray LineItemArray `xml:"LineItemArray,omitempty" json:"LineItemArray,omitempty"`

	// The terms and conditions for this purchase order.  Information that is order specific or information dealing with the configuration or shipment of the order should not be entered here.
	TermsAndConditions string `xml:"termsAndConditions" json:"termsAndConditions,omitempty"`

	// The sales channel

	// SalesChannel string `xml:"salesChannel,omitempty" json:"salesChannel,omitempty"`

	// The promotion code

	// PromoCode string `xml:"promoCode,omitempty" json:"promoCode,omitempty"`

	// TaxInformationArray struct {
	// 	TaxInformation []*TaxInformation `xml:"TaxInformation,omitempty" json:"TaxInformation,omitempty"`
	// } `xml:"TaxInformationArray,omitempty" json:"TaxInformationArray,omitempty"`
}


type SendPORequest struct {
	XMLName xml.Name `xml:"http://www.promostandards.org/WSDL/PO/1.0.0/ SendPORequest"`

	WsVersion *string `xml:"http://www.promostandards.org/WSDL/PO/1.0.0/SharedObjects/ wsVersion,omitempty" json:"wsVersion,omitempty"`

	Id *string `xml:"http://www.promostandards.org/WSDL/PO/1.0.0/SharedObjects/ id,omitempty" json:"id,omitempty"`

	Password *string `xml:"http://www.promostandards.org/WSDL/PO/1.0.0/SharedObjects/ password,omitempty" json:"password,omitempty"`

	PO *PO `xml:"PO,omitempty" json:"PO,omitempty"`
}

type SendPOResponse struct {
	XMLName xml.Name `xml:"http://www.promostandards.org/WSDL/PO/1.0.0/ SendPOResponse"`

	// The transaction id of the PO submittal
	TransactionId string `xml:"transactionId,omitempty" json:"transactionId,omitempty"`

	ServiceMessageArray *ServiceMessageArray `xml:"ServiceMessageArray,omitempty" json:"ServiceMessageArray,omitempty"`
}

type POService interface {
	GetSupportedOrderTypes(request *GetSupportedOrderTypesRequest) (*GetSupportedOrderTypesResponse, error)

	GetSupportedOrderTypesContext(ctx context.Context, request *GetSupportedOrderTypesRequest) (*GetSupportedOrderTypesResponse, error)

	SendPO(request *SendPORequest) (*SendPOResponse, error)

	SendPOContext(ctx context.Context, request *SendPORequest) (*SendPOResponse, error)
}

type pOService struct {
	client *soap.Client
}

func NewPOService(client *soap.Client) POService {
	return &pOService{
		client: client,
	}
}

func (service *pOService) GetSupportedOrderTypesContext(ctx context.Context, request *GetSupportedOrderTypesRequest) (*GetSupportedOrderTypesResponse, error) {
	response := new(GetSupportedOrderTypesResponse)
	err := service.client.CallContext(ctx, "getSupportedOrderTypes", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *pOService) GetSupportedOrderTypes(request *GetSupportedOrderTypesRequest) (*GetSupportedOrderTypesResponse, error) {
	return service.GetSupportedOrderTypesContext(
		context.Background(),
		request,
	)
}

func (service *pOService) SendPOContext(ctx context.Context, request *SendPORequest) (*SendPOResponse, error) {
	response := new(SendPOResponse)
	// c, _ := xml.Marshal(request)
	// fmt.Println(string(c))
	err := service.client.CallContext(ctx, "sendPO", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *pOService) SendPO(request *SendPORequest) (*SendPOResponse, error) {
	return service.SendPOContext(
		context.Background(),
		request,
	)
}
