// Code generated by gowsdl DO NOT EDIT.

package myservice

import (
	"context"
	"encoding/xml"
	"github.com/hooklift/gowsdl/soap"
	"github.com/araddon/dateparse"
	"time"
)


type CustomTime struct {
	time.Time
}

func (c *CustomTime) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	var v string
	d.DecodeElement(&v, &start)
	if v != "" {
		parse, err := dateparse.ParseAny(v)
		if err != nil {
			return err
		}
		*c = CustomTime{parse}
	}

	return nil
}

func (c *CustomTime) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	const shortForm = "2006-01-02T15:04:05"
	s := c.Format(shortForm)
	return e.EncodeElement(s, start)
}

// against "unused imports"
var _ time.Time
var _ xml.Name

type AnyType struct {
	InnerXML string `xml:",innerxml"`
}

type AnyURI string

type NCName string

type GetFilterValuesRequest struct {
	XMLName xml.Name `xml:"http://www.promostandards.org/WSDL/InventoryService/1.0.0/ GetFilterValuesRequest" bson:"-"`

	//
	// The Standard Version of the Web Service being referenced
	//

	WsVersion string `xml:"wsVersion,omitempty" json:"wsVersion,omitempty"`

	//
	// The customerID or any other agreed upon ID
	//

	Id string `xml:"id,omitempty" json:"id,omitempty"`

	//
	// The password associated with the customerID
	//

	Password string `xml:"password,omitempty" json:"password,omitempty"`

	//
	// Item’s ID
	//

	ProductID string `xml:"productID,omitempty" json:"productID,omitempty"`

	//
	// productID type (Distributor, Supplier)
	//

	ProductIDtype string `xml:"productIDtype,omitempty" json:"productIDtype,omitempty"`
}

type GetFilterValuesReply struct {
	XMLName xml.Name `xml:"http://www.promostandards.org/WSDL/InventoryService/1.0.0/ GetFilterValuesReply" bson:"-"`

	//
	// The associated product
	//

	ProductID string `xml:"productID,omitempty" json:"productID,omitempty" bson:"product_id,omitempty"`

	FilterColorArray struct {
		FilterColor string `xml:"filterColor,omitempty" json:"filterColor,omitempty" bson:"filter_color,omitempty"`
	} `xml:"FilterColorArray,omitempty" json:"FilterColorArray,omitempty" bson:"filter_color_array,omitempty"`

	FilterSizeArray struct {
		FilterSize string `xml:"filterSize,omitempty" json:"filterSize,omitempty" bson:"filter_size,omitempty"`
	} `xml:"FilterSizeArray,omitempty" json:"FilterSizeArray,omitempty" bson:"filter_size_array,omitempty"`

	FilterSelectionArray struct {
		FilterSelection string `xml:"filterSelection,omitempty" json:"filterSelection,omitempty" bson:"filter_selection,omitempty"`
	} `xml:"FilterSelectionArray,omitempty" json:"FilterSelectionArray,omitempty" bson:"filter_selection_array,omitempty"`

	//
	// Response for any error requiring notification to requestor
	//

	ErrorMessage string `xml:"errorMessage,omitempty" json:"errorMessage,omitempty"`
}

type Request struct {
	XMLName xml.Name `xml:"http://www.promostandards.org/WSDL/InventoryService/1.0.0/ Request" bson:"-"`

	//
	// The Standard Version of the Web Service being referenced
	//

	WsVersion string `xml:"wsVersion,omitempty" json:"wsVersion,omitempty"`

	//
	// The customerID or any other agreed upon ID
	//

	Id string `xml:"id,omitempty" json:"id,omitempty"`

	//
	// The password associated with the customerID
	//

	Password string `xml:"password,omitempty" json:"password,omitempty"`

	//
	// Item’s ID
	//

	ProductID string `xml:"productID,omitempty" json:"productID,omitempty"`

	//
	// productID type (Distributor, Supplier)
	//

	ProductIDtype string `xml:"productIDtype,omitempty" json:"productIDtype,omitempty"`

	FilterColorArray struct {
		FilterColor string `xml:"filterColor,omitempty" json:"filterColor,omitempty"`
	} `xml:"FilterColorArray,omitempty" json:"FilterColorArray,omitempty"`

	FilterSizeArray struct {
		FilterSize string `xml:"filterSize,omitempty" json:"filterSize,omitempty"`
	} `xml:"FilterSizeArray,omitempty" json:"FilterSizeArray,omitempty"`

	FilterSelectionArray struct {
		FilterSelection string `xml:"filterSelection,omitempty" json:"filterSelection,omitempty"`
	} `xml:"FilterSelectionArray,omitempty" json:"FilterSelectionArray,omitempty"`
}

type ProductVariationInventory struct {
//
	// The associated part
	//

	PartID string `xml:"partID,omitempty" json:"partID,omitempty" bson:"part_id,omitempty"`

	//
	// Part’s description
	//

	PartDescription string `xml:"partDescription,omitempty" json:"partDescription,omitempty" bson:"part_description,omitempty"`

	//
	// Part’s brand
	//

	PartBrand string `xml:"partBrand,omitempty" json:"partBrand,omitempty" bson:"part_brand,omitempty"`

	//
	// Variance from requested part’s price
	//

	PriceVariance string `xml:"priceVariance,omitempty" json:"priceVariance,omitempty" bson:"price_variance,omitempty"`

	//
	// The quantity available
	//

	QuantityAvailable string `xml:"quantityAvailable,omitempty" json:"quantityAvailable,omitempty" bson:"quantity_available,omitempty"`

	//
	// Description of the color of the part
	//

	AttributeColor string `xml:"attributeColor,omitempty" json:"attributeColor,omitempty" bson:"attribute_color,omitempty"`

	//
	// Description of the size of the part
	//

	AttributeSize string `xml:"attributeSize,omitempty" json:"attributeSize,omitempty" bson:"attribute_size,omitempty"`

	//
	// Description of the generic selection criteria
	//

	AttributeSelection string `xml:"attributeSelection,omitempty" json:"attributeSelection,omitempty" bson:"attribute_selection,omitempty"`

	AttributeFlexArray struct {
		AttributeFlex []struct {
			Id string `xml:"id,omitempty" json:"id,omitempty" bson:"id,omitempty"`

			Name string `xml:"name,omitempty" json:"name,omitempty" bson:"name,omitempty"`

			Value string `xml:"value,omitempty" json:"value,omitempty" bson:"value,omitempty"`
		} `xml:"AttributeFlex,omitempty" json:"AttributeFlex,omitempty" bson:"attribute_flex,omitempty"`
	} `xml:"AttributeFlexArray,omitempty" json:"AttributeFlexArray,omitempty" bson:"attribute_flex_array,omitempty"`

	//
	// customProductMessage5 Message from the supplier regarding the stock
	//

	CustomProductMessage string `xml:"customProductMessage,omitempty" json:"customProductMessage,omitempty" bson:"custom_product_message,omitempty"`

	//
	// Record type (exact, alternate)
	//

	EntryType string `xml:"entryType,omitempty" json:"entryType,omitempty" bson:"entry_type,omitempty"`

	//
	// Datetime inventory is available
	//
	ValidTimestamp CustomTime `xml:"validTimestamp,omitempty" json:"validTimestamp,omitempty" bson:"valid_timestamp,omitempty"`
}

type Reply struct {
	XMLName xml.Name `xml:"http://www.promostandards.org/WSDL/InventoryService/1.0.0/ Reply" bson:"-"`

	//
	// The associated product
	//

	ProductID string `xml:"productID,omitempty" json:"productID,omitempty" bson:"product_id,omitempty"`

	ProductVariationInventoryArray struct {
		ProductVariationInventory []ProductVariationInventory `xml:"ProductVariationInventory,omitempty" json:"ProductVariationInventory,omitempty" bson:"product_variation_inventory,omitempty"`
	} `xml:"ProductVariationInventoryArray,omitempty" json:"ProductVariationInventoryArray,omitempty" bson:"product_variation_inventory_array,omitempty"`

	ProductCompanionInventoryArray struct {
		ProductCompanionInventory []struct {

			//
			// The companion part
			//

			PartID string `xml:"partID,omitempty" json:"partID,omitempty" bson:"part_id,omitempty"`

			//
			// Part’s description
			//

			PartDescription string `xml:"partDescription,omitempty" json:"partDescription,omitempty" bson:"part_description,omitempty"`

			//
			// Part’s brand
			//

			PartBrand string `xml:"partBrand,omitempty" json:"partBrand,omitempty" bson:"part_brand,omitempty"`

			//
			// Companion item price
			//

			Price string `xml:"price,omitempty" json:"price,omitempty" bson:"price,omitempty"`

			//
			// The quantity available
			//

			QuantityAvailable int `xml:"quantityAvailable,omitempty" json:"quantityAvailable,omitempty" bson:"quantity_available,omitempty"`

			//
			// Description of the color of the part
			//

			AttributeColor string `xml:"attributeColor,omitempty" json:"attributeColor,omitempty" bson:"attribute_color,omitempty"`

			//
			// Description of the size of the part
			//

			AttributeSize string `xml:"attributeSize,omitempty" json:"attributeSize,omitempty" bson:"attribute_size,omitempty"`

			//
			// Description of the generic selection criteria of the part
			//

			AttributeSelection string `xml:"attributeSelection,omitempty" json:"attributeSelection,omitempty" bson:"attribute_selection,omitempty"`

			AttributeFlexArray struct {
				AttributeFlex []struct {
					Id string `xml:"id,omitempty" json:"id,omitempty" bson:"id,omitempty"`

					Name string `xml:"name,omitempty" json:"name,omitempty" bson:"name,omitempty"`

					Value string `xml:"value,omitempty" json:"value,omitempty" bson:"value,omitempty"`
				} `xml:"AttributeFlex,omitempty" json:"AttributeFlex,omitempty" bson:"attribute_flex,omitempty"`
			} `xml:"AttributeFlexArray,omitempty" json:"AttributeFlexArray,omitempty" bson:"attribute_flex_array,omitempty"`

			//
			// customProductMessage5 Message from the supplier regarding the stock
			//

			CustomProductMessage string `xml:"customProductMessage,omitempty" json:"customProductMessage,omitempty" bson:"custom_product_message,omitempty"`

			//
			// Record type (exact, alternate)
			//

			EntryType string `xml:"entryType,omitempty" json:"entryType,omitempty" bson:"entry_type,omitempty"`

			//
			// Datetime inventory is available
			//
			ValidTimestamp CustomTime `xml:"validTimestamp,omitempty" json:"validTimestamp,omitempty" bson:"valid_timestamp,omitempty"`
		} `xml:"ProductCompanionInventory,omitempty" json:"ProductCompanionInventory,omitempty" bson:"product_companion_inventory,omitempty"`
	} `xml:"ProductCompanionInventoryArray,omitempty" json:"ProductCompanionInventoryArray,omitempty" bson:"product_companion_inventory_array,omitempty"`

	//
	// Response for any error requiring notification to requestor
	//

	ErrorMessage string `xml:"errorMessage,omitempty" json:"errorMessage,omitempty" bson:"error_message,omitempty"`

	CustomMessageArray struct {
		CustomMessage string `xml:"customMessage,omitempty" json:"customMessage,omitempty" bson:"custom_message,omitempty"`
	} `xml:"CustomMessageArray,omitempty" json:"CustomMessageArray,omitempty" bson:"custom_message_array,omitempty"`
}

type InventoryService interface {
	GetFilterValues(request *GetFilterValuesRequest) (*GetFilterValuesReply, error)

	GetFilterValuesContext(ctx context.Context, request *GetFilterValuesRequest) (*GetFilterValuesReply, error)

	GetInventoryLevels(request *Request) (*Reply, error)

	GetInventoryLevelsContext(ctx context.Context, request *Request) (*Reply, error)
}

type inventoryService struct {
	client *soap.Client
}

func NewInventoryService(client *soap.Client) InventoryService {
	return &inventoryService{
		client: client,
	}
}

func (service *inventoryService) GetFilterValuesContext(ctx context.Context, request *GetFilterValuesRequest) (*GetFilterValuesReply, error) {
	response := new(GetFilterValuesReply)
	err := service.client.CallContext(ctx, "getFilterValues", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *inventoryService) GetFilterValues(request *GetFilterValuesRequest) (*GetFilterValuesReply, error) {
	return service.GetFilterValuesContext(
		context.Background(),
		request,
	)
}

func (service *inventoryService) GetInventoryLevelsContext(ctx context.Context, request *Request) (*Reply, error) {
	response := new(Reply)
	err := service.client.CallContext(ctx, "getInventoryLevels", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *inventoryService) GetInventoryLevels(request *Request) (*Reply, error) {
	return service.GetInventoryLevelsContext(
		context.Background(),
		request,
	)
}
